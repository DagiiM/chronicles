[
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "apps",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "GenericForeignKey",
        "importPath": "django.contrib.contenttypes.fields",
        "description": "django.contrib.contenttypes.fields",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.fields",
        "documentation": {}
    },
    {
        "label": "GenericRelation",
        "importPath": "django.contrib.contenttypes.fields",
        "description": "django.contrib.contenttypes.fields",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.fields",
        "documentation": {}
    },
    {
        "label": "GenericForeignKey",
        "importPath": "django.contrib.contenttypes.fields",
        "description": "django.contrib.contenttypes.fields",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.fields",
        "documentation": {}
    },
    {
        "label": "GenericRelation",
        "importPath": "django.contrib.contenttypes.fields",
        "description": "django.contrib.contenttypes.fields",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.fields",
        "documentation": {}
    },
    {
        "label": "ContentType",
        "importPath": "django.contrib.contenttypes.models",
        "description": "django.contrib.contenttypes.models",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.models",
        "documentation": {}
    },
    {
        "label": "ContentType",
        "importPath": "django.contrib.contenttypes.models",
        "description": "django.contrib.contenttypes.models",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "authentication.models",
        "description": "authentication.models",
        "isExtraImport": true,
        "detail": "authentication.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "authentication.models",
        "description": "authentication.models",
        "isExtraImport": true,
        "detail": "authentication.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "authentication.models",
        "description": "authentication.models",
        "isExtraImport": true,
        "detail": "authentication.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "authentication.models",
        "description": "authentication.models",
        "isExtraImport": true,
        "detail": "authentication.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "authentication.models",
        "description": "authentication.models",
        "isExtraImport": true,
        "detail": "authentication.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "authentication.models",
        "description": "authentication.models",
        "isExtraImport": true,
        "detail": "authentication.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "authentication.models",
        "description": "authentication.models",
        "isExtraImport": true,
        "detail": "authentication.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "authentication.models",
        "description": "authentication.models",
        "isExtraImport": true,
        "detail": "authentication.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "authentication.models",
        "description": "authentication.models",
        "isExtraImport": true,
        "detail": "authentication.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "authentication.models",
        "description": "authentication.models",
        "isExtraImport": true,
        "detail": "authentication.models",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "mixins",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "mixins",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "authentication",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "BaseSerializer",
        "importPath": "app.serializers",
        "description": "app.serializers",
        "isExtraImport": true,
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "BaseSerializer",
        "importPath": "app.serializers",
        "description": "app.serializers",
        "isExtraImport": true,
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "BaseSerializer",
        "importPath": "app.serializers",
        "description": "app.serializers",
        "isExtraImport": true,
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "SearchSerializer",
        "importPath": "app.serializers",
        "description": "app.serializers",
        "isExtraImport": true,
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "BaseSerializer",
        "importPath": "app.serializers",
        "description": "app.serializers",
        "isExtraImport": true,
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "BaseSerializer",
        "importPath": "app.serializers",
        "description": "app.serializers",
        "isExtraImport": true,
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "BaseSerializer",
        "importPath": "app.serializers",
        "description": "app.serializers",
        "isExtraImport": true,
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "BaseSerializer",
        "importPath": "app.serializers",
        "description": "app.serializers",
        "isExtraImport": true,
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "AdminConfig",
        "importPath": "django.contrib.admin.apps",
        "description": "django.contrib.admin.apps",
        "isExtraImport": true,
        "detail": "django.contrib.admin.apps",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "django.core.cache",
        "description": "django.core.cache",
        "isExtraImport": true,
        "detail": "django.core.cache",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "django.core.cache",
        "description": "django.core.cache",
        "isExtraImport": true,
        "detail": "django.core.cache",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "exception_handler",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "QuerySet",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "QuerySet",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Subquery",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Prefetch",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Prefetch",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "reduce",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "operator",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "operator",
        "description": "operator",
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "OrderingFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "SearchFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "PageNumberPagination",
        "importPath": "rest_framework.pagination",
        "description": "rest_framework.pagination",
        "isExtraImport": true,
        "detail": "rest_framework.pagination",
        "documentation": {}
    },
    {
        "label": "JSONRenderer",
        "importPath": "rest_framework.renderers",
        "description": "rest_framework.renderers",
        "isExtraImport": true,
        "detail": "rest_framework.renderers",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "PageNotAnInteger",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "EmptyPage",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "PermissionsMixin",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "APIException",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "AuthenticationFailed",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFound",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "django.core.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "validate_email",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "validate_email",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "validate_email",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "validate_email",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MaxLengthValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserChangeForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "BaseForm",
        "importPath": "app.forms",
        "description": "app.forms",
        "isExtraImport": true,
        "detail": "app.forms",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "cached_property",
        "importPath": "django.utils.functional",
        "description": "django.utils.functional",
        "isExtraImport": true,
        "detail": "django.utils.functional",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "make_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "make_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "check_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "Searchable",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Searchable",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Searchable",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Searchable",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "NotificationPreference",
        "importPath": "notifications.enums",
        "description": "notifications.enums",
        "isExtraImport": true,
        "detail": "notifications.enums",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "validate_password",
        "importPath": "django.contrib.auth.password_validation",
        "description": "django.contrib.auth.password_validation",
        "isExtraImport": true,
        "detail": "django.contrib.auth.password_validation",
        "documentation": {}
    },
    {
        "label": "PasswordResetTokenGenerator",
        "importPath": "django.contrib.auth.tokens",
        "description": "django.contrib.auth.tokens",
        "isExtraImport": true,
        "detail": "django.contrib.auth.tokens",
        "documentation": {}
    },
    {
        "label": "default_token_generator",
        "importPath": "django.contrib.auth.tokens",
        "description": "django.contrib.auth.tokens",
        "isExtraImport": true,
        "detail": "django.contrib.auth.tokens",
        "documentation": {}
    },
    {
        "label": "PasswordResetTokenGenerator",
        "importPath": "django.contrib.auth.tokens",
        "description": "django.contrib.auth.tokens",
        "isExtraImport": true,
        "detail": "django.contrib.auth.tokens",
        "documentation": {}
    },
    {
        "label": "PasswordResetTokenGenerator",
        "importPath": "django.contrib.auth.tokens",
        "description": "django.contrib.auth.tokens",
        "isExtraImport": true,
        "detail": "django.contrib.auth.tokens",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "EmailMultiAlternatives",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "EmailMessage",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "force_bytes",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "force_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "force_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "force_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_decode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_encode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_decode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_decode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "ModelViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "ModelViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "ErrorResponse",
        "importPath": "app.exceptions",
        "description": "app.exceptions",
        "isExtraImport": true,
        "detail": "app.exceptions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "ObtainAuthToken",
        "importPath": "rest_framework.authtoken.views",
        "description": "rest_framework.authtoken.views",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.views",
        "documentation": {}
    },
    {
        "label": "obtain_auth_token",
        "importPath": "rest_framework.authtoken.views",
        "description": "rest_framework.authtoken.views",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.views",
        "documentation": {}
    },
    {
        "label": "ObtainAuthToken",
        "importPath": "rest_framework.authtoken.views",
        "description": "rest_framework.authtoken.views",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.views",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "rest_framework.authtoken.models",
        "description": "rest_framework.authtoken.models",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.models",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "rest_framework.authtoken.models",
        "description": "rest_framework.authtoken.models",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.models",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "rest_framework.authtoken.models",
        "description": "rest_framework.authtoken.models",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.models",
        "documentation": {}
    },
    {
        "label": "SearchSerializer",
        "importPath": "utils.serializers",
        "description": "utils.serializers",
        "isExtraImport": true,
        "detail": "utils.serializers",
        "documentation": {}
    },
    {
        "label": "BaseSerializer",
        "importPath": "utils.serializers",
        "description": "utils.serializers",
        "isExtraImport": true,
        "detail": "utils.serializers",
        "documentation": {}
    },
    {
        "label": "BaseViewSet",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "EmailAuthToken",
        "importPath": "authentication.views",
        "description": "authentication.views",
        "isExtraImport": true,
        "detail": "authentication.views",
        "documentation": {}
    },
    {
        "label": "BaseViewSet",
        "importPath": "app.views",
        "description": "app.views",
        "isExtraImport": true,
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "BaseViewSet",
        "importPath": "app.views",
        "description": "app.views",
        "isExtraImport": true,
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "BaseViewSet",
        "importPath": "app.views",
        "description": "app.views",
        "isExtraImport": true,
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "BaseViewSet",
        "importPath": "app.views",
        "description": "app.views",
        "isExtraImport": true,
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "BaseViewSet",
        "importPath": "app.views",
        "description": "app.views",
        "isExtraImport": true,
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "Clinic",
        "importPath": "clinics.models",
        "description": "clinics.models",
        "isExtraImport": true,
        "detail": "clinics.models",
        "documentation": {}
    },
    {
        "label": "Clinic",
        "importPath": "clinics.models",
        "description": "clinics.models",
        "isExtraImport": true,
        "detail": "clinics.models",
        "documentation": {}
    },
    {
        "label": "AppointmentType",
        "importPath": "clinics.models",
        "description": "clinics.models",
        "isExtraImport": true,
        "detail": "clinics.models",
        "documentation": {}
    },
    {
        "label": "Staff",
        "importPath": "clinics.models",
        "description": "clinics.models",
        "isExtraImport": true,
        "detail": "clinics.models",
        "documentation": {}
    },
    {
        "label": "Appointment",
        "importPath": "clinics.models",
        "description": "clinics.models",
        "isExtraImport": true,
        "detail": "clinics.models",
        "documentation": {}
    },
    {
        "label": "Clinic",
        "importPath": "clinics.models",
        "description": "clinics.models",
        "isExtraImport": true,
        "detail": "clinics.models",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "clinics.models",
        "description": "clinics.models",
        "isExtraImport": true,
        "detail": "clinics.models",
        "documentation": {}
    },
    {
        "label": "Staff",
        "importPath": "clinics.models",
        "description": "clinics.models",
        "isExtraImport": true,
        "detail": "clinics.models",
        "documentation": {}
    },
    {
        "label": "ClinicSerializer",
        "importPath": "clinics.serializers",
        "description": "clinics.serializers",
        "isExtraImport": true,
        "detail": "clinics.serializers",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "django_countries.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django_countries.fields",
        "description": "django_countries.fields",
        "detail": "django_countries.fields",
        "documentation": {}
    },
    {
        "label": "LazyTypedChoiceField",
        "importPath": "django_countries.fields",
        "description": "django_countries.fields",
        "isExtraImport": true,
        "detail": "django_countries.fields",
        "documentation": {}
    },
    {
        "label": "CountryField",
        "importPath": "django_countries.fields",
        "description": "django_countries.fields",
        "isExtraImport": true,
        "detail": "django_countries.fields",
        "documentation": {}
    },
    {
        "label": "django_google_maps.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django_google_maps.fields",
        "description": "django_google_maps.fields",
        "detail": "django_google_maps.fields",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.contrib.gis.db",
        "description": "django.contrib.gis.db",
        "isExtraImport": true,
        "detail": "django.contrib.gis.db",
        "documentation": {}
    },
    {
        "label": "AdminTextInputWidget",
        "importPath": "django.contrib.admin.widgets",
        "description": "django.contrib.admin.widgets",
        "isExtraImport": true,
        "detail": "django.contrib.admin.widgets",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "GoogleV3",
        "importPath": "geopy.geocoders",
        "description": "geopy.geocoders",
        "isExtraImport": true,
        "detail": "geopy.geocoders",
        "documentation": {}
    },
    {
        "label": "Nominatim",
        "importPath": "geopy.geocoders",
        "description": "geopy.geocoders",
        "isExtraImport": true,
        "detail": "geopy.geocoders",
        "documentation": {}
    },
    {
        "label": "widgets",
        "importPath": "django_google_maps",
        "description": "django_google_maps",
        "isExtraImport": true,
        "detail": "django_google_maps",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "django_google_maps",
        "description": "django_google_maps",
        "isExtraImport": true,
        "detail": "django_google_maps",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "django_google_maps",
        "description": "django_google_maps",
        "isExtraImport": true,
        "detail": "django_google_maps",
        "documentation": {}
    },
    {
        "label": "OSMGeoAdmin",
        "importPath": "django.contrib.gis.admin",
        "description": "django.contrib.gis.admin",
        "isExtraImport": true,
        "detail": "django.contrib.gis.admin",
        "documentation": {}
    },
    {
        "label": "Distance",
        "importPath": "django.contrib.gis.db.models.functions",
        "description": "django.contrib.gis.db.models.functions",
        "isExtraImport": true,
        "detail": "django.contrib.gis.db.models.functions",
        "documentation": {}
    },
    {
        "label": "Distance",
        "importPath": "django.contrib.gis.db.models.functions",
        "description": "django.contrib.gis.db.models.functions",
        "isExtraImport": true,
        "detail": "django.contrib.gis.db.models.functions",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "django.contrib.gis.geos",
        "description": "django.contrib.gis.geos",
        "isExtraImport": true,
        "detail": "django.contrib.gis.geos",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "django.contrib.gis.geos",
        "description": "django.contrib.gis.geos",
        "isExtraImport": true,
        "detail": "django.contrib.gis.geos",
        "documentation": {}
    },
    {
        "label": "PointField",
        "importPath": "django.contrib.gis.forms",
        "description": "django.contrib.gis.forms",
        "isExtraImport": true,
        "detail": "django.contrib.gis.forms",
        "documentation": {}
    },
    {
        "label": "countries",
        "importPath": "django_countries",
        "description": "django_countries",
        "isExtraImport": true,
        "detail": "django_countries",
        "documentation": {}
    },
    {
        "label": "countries",
        "importPath": "django_countries",
        "description": "django_countries",
        "isExtraImport": true,
        "detail": "django_countries",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "pre_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "QuerySet",
        "importPath": "django.db.models.query",
        "description": "django.db.models.query",
        "isExtraImport": true,
        "detail": "django.db.models.query",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "distance",
        "importPath": "geopy.distance",
        "description": "geopy.distance",
        "isExtraImport": true,
        "detail": "geopy.distance",
        "documentation": {}
    },
    {
        "label": "AboutRelationship",
        "importPath": "about.models",
        "description": "about.models",
        "isExtraImport": true,
        "detail": "about.models",
        "documentation": {}
    },
    {
        "label": "About",
        "importPath": "about.models",
        "description": "about.models",
        "isExtraImport": true,
        "detail": "about.models",
        "documentation": {}
    },
    {
        "label": "holidays",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "holidays",
        "description": "holidays",
        "detail": "holidays",
        "documentation": {}
    },
    {
        "label": "AboutSerializer",
        "importPath": "about.serializers",
        "description": "about.serializers",
        "isExtraImport": true,
        "detail": "about.serializers",
        "documentation": {}
    },
    {
        "label": "AboutSerializer",
        "importPath": "about.serializers",
        "description": "about.serializers",
        "isExtraImport": true,
        "detail": "about.serializers",
        "documentation": {}
    },
    {
        "label": "Widget",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "HiddenInput",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "Media",
        "importPath": "django.forms.widgets",
        "description": "django.forms.widgets",
        "isExtraImport": true,
        "detail": "django.forms.widgets",
        "documentation": {}
    },
    {
        "label": "MediaDefiningClass",
        "importPath": "django.forms.widgets",
        "description": "django.forms.widgets",
        "isExtraImport": true,
        "detail": "django.forms.widgets",
        "documentation": {}
    },
    {
        "label": "openai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "openai",
        "description": "openai",
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "retry",
        "importPath": "tenacity",
        "description": "tenacity",
        "isExtraImport": true,
        "detail": "tenacity",
        "documentation": {}
    },
    {
        "label": "stop_after_delay",
        "importPath": "tenacity",
        "description": "tenacity",
        "isExtraImport": true,
        "detail": "tenacity",
        "documentation": {}
    },
    {
        "label": "wait_fixed",
        "importPath": "tenacity",
        "description": "tenacity",
        "isExtraImport": true,
        "detail": "tenacity",
        "documentation": {}
    },
    {
        "label": "Status",
        "importPath": "clinics.enums",
        "description": "clinics.enums",
        "isExtraImport": true,
        "detail": "clinics.enums",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "NotificationViewSet",
        "importPath": "notifications.views",
        "description": "notifications.views",
        "isExtraImport": true,
        "detail": "notifications.views",
        "documentation": {}
    },
    {
        "label": "FSMField",
        "importPath": "django_fsm",
        "description": "django_fsm",
        "isExtraImport": true,
        "detail": "django_fsm",
        "documentation": {}
    },
    {
        "label": "transition",
        "importPath": "django_fsm",
        "description": "django_fsm",
        "isExtraImport": true,
        "detail": "django_fsm",
        "documentation": {}
    },
    {
        "label": "FSMIntegerField",
        "importPath": "django_fsm",
        "description": "django_fsm",
        "isExtraImport": true,
        "detail": "django_fsm",
        "documentation": {}
    },
    {
        "label": "fsm_log_by",
        "importPath": "django_fsm_log.decorators",
        "description": "django_fsm_log.decorators",
        "isExtraImport": true,
        "detail": "django_fsm_log.decorators",
        "documentation": {}
    },
    {
        "label": "appointments",
        "importPath": "client.views",
        "description": "client.views",
        "isExtraImport": true,
        "detail": "client.views",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "about.migrations.0001_initial",
        "description": "about.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('contenttypes', '0002_remove_content_type_name'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='About',\n            fields=[",
        "detail": "about.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "AboutConfig",
        "kind": 6,
        "importPath": "about.apps",
        "description": "about.apps",
        "peekOfCode": "class AboutConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'about'",
        "detail": "about.apps",
        "documentation": {}
    },
    {
        "label": "About",
        "kind": 6,
        "importPath": "about.models",
        "description": "about.models",
        "peekOfCode": "class About(models.Model):\n    content = models.TextField()\n    is_verified = models.BooleanField(default=False)\n    created_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='abouts_created')\n    verified_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='abouts_verified', null=True, blank=True)\n    verified_date = models.DateTimeField(null=True, blank=True)\n    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)\n    object_id = models.PositiveIntegerField()\n    related_object = GenericForeignKey('content_type', 'object_id')\nclass AboutRelationship(models.Model):",
        "detail": "about.models",
        "documentation": {}
    },
    {
        "label": "AboutRelationship",
        "kind": 6,
        "importPath": "about.models",
        "description": "about.models",
        "peekOfCode": "class AboutRelationship(models.Model):\n    about = models.ForeignKey(About, on_delete=models.CASCADE, related_name='relationships')\n    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)\n    object_id = models.PositiveIntegerField()\n    related_object = GenericForeignKey('content_type', 'object_id')\n    @staticmethod\n    def relate_to_model(model_class):\n        ct = ContentType.objects.get_for_model(model_class)\n        about = About.objects.create(content_type=ct, object_id=model_class.pk)\n        AboutRelationship.objects.create(about=about, content_type=ct, object_id=model_class.pk)",
        "detail": "about.models",
        "documentation": {}
    },
    {
        "label": "AboutSerializer",
        "kind": 6,
        "importPath": "about.serializers",
        "description": "about.serializers",
        "peekOfCode": "class AboutSerializer(BaseSerializer):\n    class Meta:\n        model = About\n        fields = ('content', 'is_verified', 'verified_date')",
        "detail": "about.serializers",
        "documentation": {}
    },
    {
        "label": "MyAdminSite",
        "kind": 6,
        "importPath": "app.admin",
        "description": "app.admin",
        "peekOfCode": "class MyAdminSite(admin.AdminSite):\n    site_header = settings.APP_NAME\n    site_title = settings.APP_DOMAIN\n    #site_url = settings.APP_TAGLINE\n    index_title = settings.APP_TAGLINE\n    #available_apps\nclass BaseAdmin(admin.ModelAdmin):\n    \"\"\"\n    A mixin to restrict write access to the admin panel for users who are not staff\n    or do not belong to the specified permission group.",
        "detail": "app.admin",
        "documentation": {}
    },
    {
        "label": "BaseAdmin",
        "kind": 6,
        "importPath": "app.admin",
        "description": "app.admin",
        "peekOfCode": "class BaseAdmin(admin.ModelAdmin):\n    \"\"\"\n    A mixin to restrict write access to the admin panel for users who are not staff\n    or do not belong to the specified permission group.\n    \"\"\"\n    staff_group_name = None  # set the group name in subclass\n    def get_queryset(self, request):\n        qs = super().get_queryset(request)\n        if not request.user.is_superuser:\n            staff_group = Group.objects.get(name=self.staff_group_name)",
        "detail": "app.admin",
        "documentation": {}
    },
    {
        "label": "MyAdminConfig",
        "kind": 6,
        "importPath": "app.apps",
        "description": "app.apps",
        "peekOfCode": "class MyAdminConfig(AdminConfig):\n    default_site = 'app.admin.MyAdminSite'",
        "detail": "app.apps",
        "documentation": {}
    },
    {
        "label": "cache_data",
        "kind": 2,
        "importPath": "app.cache",
        "description": "app.cache",
        "peekOfCode": "def cache_data(redis_key: str, cache_timeout: Optional[int] = None) -> Callable:\n    \"\"\"\n    A decorator function to cache the results of a function using Redis.\n    \"\"\"\n    def cache_decorator(func: Callable) -> Callable:\n        def wrapper(*args, **kwargs):\n            # Generate a cache key based on the function name, app name, and its arguments\n            cache_key = f\"{settings.APP_NAME}-{func.__name__}-{json.dumps(args)}-{json.dumps(kwargs)}-{redis_key}\"\n            # Check if the cache key exists in Redis\n            cached_data = cache.get(cache_key)",
        "detail": "app.cache",
        "documentation": {}
    },
    {
        "label": "redis_host",
        "kind": 5,
        "importPath": "app.cache",
        "description": "app.cache",
        "peekOfCode": "redis_host = settings.CACHES['default']['LOCATION']\nredis_port = settings.CACHES['default'].get('PORT', 6379)\nredis_db = settings.CACHES['default'].get('OPTIONS', {}).get('DB', 0)\ncache_timeout = settings.CACHE_TTL\ndef cache_data(redis_key: str, cache_timeout: Optional[int] = None) -> Callable:\n    \"\"\"\n    A decorator function to cache the results of a function using Redis.\n    \"\"\"\n    def cache_decorator(func: Callable) -> Callable:\n        def wrapper(*args, **kwargs):",
        "detail": "app.cache",
        "documentation": {}
    },
    {
        "label": "redis_port",
        "kind": 5,
        "importPath": "app.cache",
        "description": "app.cache",
        "peekOfCode": "redis_port = settings.CACHES['default'].get('PORT', 6379)\nredis_db = settings.CACHES['default'].get('OPTIONS', {}).get('DB', 0)\ncache_timeout = settings.CACHE_TTL\ndef cache_data(redis_key: str, cache_timeout: Optional[int] = None) -> Callable:\n    \"\"\"\n    A decorator function to cache the results of a function using Redis.\n    \"\"\"\n    def cache_decorator(func: Callable) -> Callable:\n        def wrapper(*args, **kwargs):\n            # Generate a cache key based on the function name, app name, and its arguments",
        "detail": "app.cache",
        "documentation": {}
    },
    {
        "label": "redis_db",
        "kind": 5,
        "importPath": "app.cache",
        "description": "app.cache",
        "peekOfCode": "redis_db = settings.CACHES['default'].get('OPTIONS', {}).get('DB', 0)\ncache_timeout = settings.CACHE_TTL\ndef cache_data(redis_key: str, cache_timeout: Optional[int] = None) -> Callable:\n    \"\"\"\n    A decorator function to cache the results of a function using Redis.\n    \"\"\"\n    def cache_decorator(func: Callable) -> Callable:\n        def wrapper(*args, **kwargs):\n            # Generate a cache key based on the function name, app name, and its arguments\n            cache_key = f\"{settings.APP_NAME}-{func.__name__}-{json.dumps(args)}-{json.dumps(kwargs)}-{redis_key}\"",
        "detail": "app.cache",
        "documentation": {}
    },
    {
        "label": "cache_timeout",
        "kind": 5,
        "importPath": "app.cache",
        "description": "app.cache",
        "peekOfCode": "cache_timeout = settings.CACHE_TTL\ndef cache_data(redis_key: str, cache_timeout: Optional[int] = None) -> Callable:\n    \"\"\"\n    A decorator function to cache the results of a function using Redis.\n    \"\"\"\n    def cache_decorator(func: Callable) -> Callable:\n        def wrapper(*args, **kwargs):\n            # Generate a cache key based on the function name, app name, and its arguments\n            cache_key = f\"{settings.APP_NAME}-{func.__name__}-{json.dumps(args)}-{json.dumps(kwargs)}-{redis_key}\"\n            # Check if the cache key exists in Redis",
        "detail": "app.cache",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "SECRET_KEY = config('SECRET_KEY')\nDEBUG = config('DEBUG', default=False, cast=bool)\nALLOWED_HOSTS = ['127.0.0.1']\nCSRF_TRUSTED_ORIGINS = []\nEMAIL_HOST = config('EMAIL_HOST')\nEMAIL_HOST_USER = config('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')\nEMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)\nEMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)\nEMAIL_SUBJECT_PREFIX = config('EMAIL_SUBJECT_PREFIX')",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "DEBUG = config('DEBUG', default=False, cast=bool)\nALLOWED_HOSTS = ['127.0.0.1']\nCSRF_TRUSTED_ORIGINS = []\nEMAIL_HOST = config('EMAIL_HOST')\nEMAIL_HOST_USER = config('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')\nEMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)\nEMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)\nEMAIL_SUBJECT_PREFIX = config('EMAIL_SUBJECT_PREFIX')\nEMAIL_USE_REMEMBER_ME = config('EMAIL_USE_REMEMBER_ME', default=True, cast=bool)",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "ALLOWED_HOSTS = ['127.0.0.1']\nCSRF_TRUSTED_ORIGINS = []\nEMAIL_HOST = config('EMAIL_HOST')\nEMAIL_HOST_USER = config('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')\nEMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)\nEMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)\nEMAIL_SUBJECT_PREFIX = config('EMAIL_SUBJECT_PREFIX')\nEMAIL_USE_REMEMBER_ME = config('EMAIL_USE_REMEMBER_ME', default=True, cast=bool)\nEMAIL_SUPPORT = config('EMAIL_SUPPORT')",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "CSRF_TRUSTED_ORIGINS",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "CSRF_TRUSTED_ORIGINS = []\nEMAIL_HOST = config('EMAIL_HOST')\nEMAIL_HOST_USER = config('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')\nEMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)\nEMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)\nEMAIL_SUBJECT_PREFIX = config('EMAIL_SUBJECT_PREFIX')\nEMAIL_USE_REMEMBER_ME = config('EMAIL_USE_REMEMBER_ME', default=True, cast=bool)\nEMAIL_SUPPORT = config('EMAIL_SUPPORT')\nAPP_DOMAIN = config('APP_DOMAIN', default='eleso.ltd') ",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "EMAIL_HOST = config('EMAIL_HOST')\nEMAIL_HOST_USER = config('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')\nEMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)\nEMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)\nEMAIL_SUBJECT_PREFIX = config('EMAIL_SUBJECT_PREFIX')\nEMAIL_USE_REMEMBER_ME = config('EMAIL_USE_REMEMBER_ME', default=True, cast=bool)\nEMAIL_SUPPORT = config('EMAIL_SUPPORT')\nAPP_DOMAIN = config('APP_DOMAIN', default='eleso.ltd') \nAPP_NAME = config('APP_NAME', default='Eleso Ltd')",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "EMAIL_HOST_USER = config('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')\nEMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)\nEMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)\nEMAIL_SUBJECT_PREFIX = config('EMAIL_SUBJECT_PREFIX')\nEMAIL_USE_REMEMBER_ME = config('EMAIL_USE_REMEMBER_ME', default=True, cast=bool)\nEMAIL_SUPPORT = config('EMAIL_SUPPORT')\nAPP_DOMAIN = config('APP_DOMAIN', default='eleso.ltd') \nAPP_NAME = config('APP_NAME', default='Eleso Ltd')\nAPP_TAGLINE = config('APP_TAGLINE')",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')\nEMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)\nEMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)\nEMAIL_SUBJECT_PREFIX = config('EMAIL_SUBJECT_PREFIX')\nEMAIL_USE_REMEMBER_ME = config('EMAIL_USE_REMEMBER_ME', default=True, cast=bool)\nEMAIL_SUPPORT = config('EMAIL_SUPPORT')\nAPP_DOMAIN = config('APP_DOMAIN', default='eleso.ltd') \nAPP_NAME = config('APP_NAME', default='Eleso Ltd')\nAPP_TAGLINE = config('APP_TAGLINE')\n# GOOGLE_API_MAP",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)\nEMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)\nEMAIL_SUBJECT_PREFIX = config('EMAIL_SUBJECT_PREFIX')\nEMAIL_USE_REMEMBER_ME = config('EMAIL_USE_REMEMBER_ME', default=True, cast=bool)\nEMAIL_SUPPORT = config('EMAIL_SUPPORT')\nAPP_DOMAIN = config('APP_DOMAIN', default='eleso.ltd') \nAPP_NAME = config('APP_NAME', default='Eleso Ltd')\nAPP_TAGLINE = config('APP_TAGLINE')\n# GOOGLE_API_MAP\nGDAL_LIBRARY_PATH = '/usr/lib/libgdal.so'",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)\nEMAIL_SUBJECT_PREFIX = config('EMAIL_SUBJECT_PREFIX')\nEMAIL_USE_REMEMBER_ME = config('EMAIL_USE_REMEMBER_ME', default=True, cast=bool)\nEMAIL_SUPPORT = config('EMAIL_SUPPORT')\nAPP_DOMAIN = config('APP_DOMAIN', default='eleso.ltd') \nAPP_NAME = config('APP_NAME', default='Eleso Ltd')\nAPP_TAGLINE = config('APP_TAGLINE')\n# GOOGLE_API_MAP\nGDAL_LIBRARY_PATH = '/usr/lib/libgdal.so'\n# Redis configuration",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "EMAIL_SUBJECT_PREFIX",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "EMAIL_SUBJECT_PREFIX = config('EMAIL_SUBJECT_PREFIX')\nEMAIL_USE_REMEMBER_ME = config('EMAIL_USE_REMEMBER_ME', default=True, cast=bool)\nEMAIL_SUPPORT = config('EMAIL_SUPPORT')\nAPP_DOMAIN = config('APP_DOMAIN', default='eleso.ltd') \nAPP_NAME = config('APP_NAME', default='Eleso Ltd')\nAPP_TAGLINE = config('APP_TAGLINE')\n# GOOGLE_API_MAP\nGDAL_LIBRARY_PATH = '/usr/lib/libgdal.so'\n# Redis configuration\nREDIS_HOST = config('REDIS_HOST', default='127.0.0.1')",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_REMEMBER_ME",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "EMAIL_USE_REMEMBER_ME = config('EMAIL_USE_REMEMBER_ME', default=True, cast=bool)\nEMAIL_SUPPORT = config('EMAIL_SUPPORT')\nAPP_DOMAIN = config('APP_DOMAIN', default='eleso.ltd') \nAPP_NAME = config('APP_NAME', default='Eleso Ltd')\nAPP_TAGLINE = config('APP_TAGLINE')\n# GOOGLE_API_MAP\nGDAL_LIBRARY_PATH = '/usr/lib/libgdal.so'\n# Redis configuration\nREDIS_HOST = config('REDIS_HOST', default='127.0.0.1')\nREDIS_PORT = config('REDIS_PORT', default=6379, cast=int)",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "EMAIL_SUPPORT",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "EMAIL_SUPPORT = config('EMAIL_SUPPORT')\nAPP_DOMAIN = config('APP_DOMAIN', default='eleso.ltd') \nAPP_NAME = config('APP_NAME', default='Eleso Ltd')\nAPP_TAGLINE = config('APP_TAGLINE')\n# GOOGLE_API_MAP\nGDAL_LIBRARY_PATH = '/usr/lib/libgdal.so'\n# Redis configuration\nREDIS_HOST = config('REDIS_HOST', default='127.0.0.1')\nREDIS_PORT = config('REDIS_PORT', default=6379, cast=int)\nREDIS_DB = config('REDIS_DB', default=0, cast=int)",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "APP_DOMAIN",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "APP_DOMAIN = config('APP_DOMAIN', default='eleso.ltd') \nAPP_NAME = config('APP_NAME', default='Eleso Ltd')\nAPP_TAGLINE = config('APP_TAGLINE')\n# GOOGLE_API_MAP\nGDAL_LIBRARY_PATH = '/usr/lib/libgdal.so'\n# Redis configuration\nREDIS_HOST = config('REDIS_HOST', default='127.0.0.1')\nREDIS_PORT = config('REDIS_PORT', default=6379, cast=int)\nREDIS_DB = config('REDIS_DB', default=0, cast=int)\n# Cache configuration",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "APP_NAME",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "APP_NAME = config('APP_NAME', default='Eleso Ltd')\nAPP_TAGLINE = config('APP_TAGLINE')\n# GOOGLE_API_MAP\nGDAL_LIBRARY_PATH = '/usr/lib/libgdal.so'\n# Redis configuration\nREDIS_HOST = config('REDIS_HOST', default='127.0.0.1')\nREDIS_PORT = config('REDIS_PORT', default=6379, cast=int)\nREDIS_DB = config('REDIS_DB', default=0, cast=int)\n# Cache configuration\nCACHE_TTL = config('CACHE_TTL', default=300, cast=int)",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "APP_TAGLINE",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "APP_TAGLINE = config('APP_TAGLINE')\n# GOOGLE_API_MAP\nGDAL_LIBRARY_PATH = '/usr/lib/libgdal.so'\n# Redis configuration\nREDIS_HOST = config('REDIS_HOST', default='127.0.0.1')\nREDIS_PORT = config('REDIS_PORT', default=6379, cast=int)\nREDIS_DB = config('REDIS_DB', default=0, cast=int)\n# Cache configuration\nCACHE_TTL = config('CACHE_TTL', default=300, cast=int)\nCACHES = {",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "GDAL_LIBRARY_PATH",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "GDAL_LIBRARY_PATH = '/usr/lib/libgdal.so'\n# Redis configuration\nREDIS_HOST = config('REDIS_HOST', default='127.0.0.1')\nREDIS_PORT = config('REDIS_PORT', default=6379, cast=int)\nREDIS_DB = config('REDIS_DB', default=0, cast=int)\n# Cache configuration\nCACHE_TTL = config('CACHE_TTL', default=300, cast=int)\nCACHES = {\n    'default': {\n        'BACKEND': 'django_redis.cache.RedisCache',",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "REDIS_HOST",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "REDIS_HOST = config('REDIS_HOST', default='127.0.0.1')\nREDIS_PORT = config('REDIS_PORT', default=6379, cast=int)\nREDIS_DB = config('REDIS_DB', default=0, cast=int)\n# Cache configuration\nCACHE_TTL = config('CACHE_TTL', default=300, cast=int)\nCACHES = {\n    'default': {\n        'BACKEND': 'django_redis.cache.RedisCache',\n        'LOCATION': f\"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}\",\n        'OPTIONS': {",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "REDIS_PORT",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "REDIS_PORT = config('REDIS_PORT', default=6379, cast=int)\nREDIS_DB = config('REDIS_DB', default=0, cast=int)\n# Cache configuration\nCACHE_TTL = config('CACHE_TTL', default=300, cast=int)\nCACHES = {\n    'default': {\n        'BACKEND': 'django_redis.cache.RedisCache',\n        'LOCATION': f\"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}\",\n        'OPTIONS': {\n            'CLIENT_CLASS': 'django_redis.client.DefaultClient',",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "REDIS_DB",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "REDIS_DB = config('REDIS_DB', default=0, cast=int)\n# Cache configuration\nCACHE_TTL = config('CACHE_TTL', default=300, cast=int)\nCACHES = {\n    'default': {\n        'BACKEND': 'django_redis.cache.RedisCache',\n        'LOCATION': f\"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}\",\n        'OPTIONS': {\n            'CLIENT_CLASS': 'django_redis.client.DefaultClient',\n        }",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "CACHE_TTL",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "CACHE_TTL = config('CACHE_TTL', default=300, cast=int)\nCACHES = {\n    'default': {\n        'BACKEND': 'django_redis.cache.RedisCache',\n        'LOCATION': f\"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}\",\n        'OPTIONS': {\n            'CLIENT_CLASS': 'django_redis.client.DefaultClient',\n        }\n    }\n}",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "CACHES",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "CACHES = {\n    'default': {\n        'BACKEND': 'django_redis.cache.RedisCache',\n        'LOCATION': f\"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}\",\n        'OPTIONS': {\n            'CLIENT_CLASS': 'django_redis.client.DefaultClient',\n        }\n    }\n}\nLOGGING = {",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "LOGGING",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "LOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n        },\n    },\n    'loggers': {\n        'django.cache': {",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "CACHE_TTL",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "CACHE_TTL = 60 * 5  # cache for 5 minutes\nSTATIC_URL = 'static/'\nSTATIC_ROOT = BASE_DIR /'static'\nSTATICFILES_DIRS = [\n    'app/static',\n]\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': config('DB_NAME'),",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATIC_ROOT = BASE_DIR /'static'\nSTATICFILES_DIRS = [\n    'app/static',\n]\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': config('DB_NAME'),\n        'USER': config('DB_USER'),",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "STATIC_ROOT = BASE_DIR /'static'\nSTATICFILES_DIRS = [\n    'app/static',\n]\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': config('DB_NAME'),\n        'USER': config('DB_USER'),\n        'PASSWORD': config('DB_PASSWORD'),",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "STATICFILES_DIRS = [\n    'app/static',\n]\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': config('DB_NAME'),\n        'USER': config('DB_USER'),\n        'PASSWORD': config('DB_PASSWORD'),\n        'HOST': config('DB_HOST'),",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': config('DB_NAME'),\n        'USER': config('DB_USER'),\n        'PASSWORD': config('DB_PASSWORD'),\n        'HOST': config('DB_HOST'),\n        'PORT': config('DB_PORT', default='5432'),\n    }\n}",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "ErrorResponse",
        "kind": 6,
        "importPath": "app.exceptions",
        "description": "app.exceptions",
        "peekOfCode": "class ErrorResponse(Exception):\n    \"\"\"\n    A standard error response format.\n    \"\"\"\n    def __init__(self, message, status_code):\n        self.errors = [{\"message\": message, \"status\": status_code}]\n        self.status_code = status_code\n    @classmethod\n    def custom_validation_error(cls, message:str,status_code:int):\n        return cls(message=message, status_code=status_code)",
        "detail": "app.exceptions",
        "documentation": {}
    },
    {
        "label": "my_exception_handler",
        "kind": 2,
        "importPath": "app.exceptions",
        "description": "app.exceptions",
        "peekOfCode": "def my_exception_handler(exc, context):\n    if isinstance(exc, ErrorResponse):\n        return JsonResponse(exc.to_dict(), status=exc.status_code)\n    else:\n        # Call REST framework's default exception handler\n        response = exception_handler(exc, context)\n        if response is not None:\n            return response\n        # Handle other exceptions here\n        # ...",
        "detail": "app.exceptions",
        "documentation": {}
    },
    {
        "label": "BaseForm",
        "kind": 6,
        "importPath": "app.forms",
        "description": "app.forms",
        "peekOfCode": "class BaseForm(forms.Form):\n    \"\"\"\n    A base form that handles errors in a standard format.\n    \"\"\"\n    error_css_class = 'error'\n    required_css_class = 'required'\n    def add_error(self, field, error):\n        \"\"\"\n        Adds an error message to the specified field in the standard format.\n        \"\"\"",
        "detail": "app.forms",
        "documentation": {}
    },
    {
        "label": "Searchable",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Searchable(models.Model):\n    \"\"\"\n    A model mixin that provides search functionality.\n    \"\"\"\n    class Meta:\n        abstract = True\n    fields_to_return: List[str] = []\n    @classmethod\n    def search_queryset(cls: Type[M], query: str, fields: List[str] = None, serializer_class_: Type[S] = None) -> Union[QuerySet[M], List[dict]]:\n        \"\"\"",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 5,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "M = TypeVar('M', bound='Model')\nS = TypeVar('S', bound=serializers.BaseSerializer)\nclass Searchable(models.Model):\n    \"\"\"\n    A model mixin that provides search functionality.\n    \"\"\"\n    class Meta:\n        abstract = True\n    fields_to_return: List[str] = []\n    @classmethod",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "S",
        "kind": 5,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "S = TypeVar('S', bound=serializers.BaseSerializer)\nclass Searchable(models.Model):\n    \"\"\"\n    A model mixin that provides search functionality.\n    \"\"\"\n    class Meta:\n        abstract = True\n    fields_to_return: List[str] = []\n    @classmethod\n    def search_queryset(cls: Type[M], query: str, fields: List[str] = None, serializer_class_: Type[S] = None) -> Union[QuerySet[M], List[dict]]:",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "CustomPagination",
        "kind": 6,
        "importPath": "app.pagination",
        "description": "app.pagination",
        "peekOfCode": "class CustomPagination(PageNumberPagination):\n    page_size = int(settings.PAGE_SIZE)\n    page_size_query_param = 'page_size'\n    max_page_size = int(settings.MAX_PAGE_SIZE)\n    def get_timeout(self, request):\n        \"\"\"\n        Returns the cache timeout for the paginated results.\n        \"\"\"\n        if request.method == 'GET':\n            return 60 * 5  # 5 minutes",
        "detail": "app.pagination",
        "documentation": {}
    },
    {
        "label": "BaseSerializer",
        "kind": 6,
        "importPath": "app.serializers",
        "description": "app.serializers",
        "peekOfCode": "class BaseSerializer(serializers.ModelSerializer):\n    \"\"\"\n    A more robust base serializer that handles exceptions and errors more gracefully.\n    \"\"\"\n    logger = logging.getLogger(__name__)\n    def to_representation(self, instance):\n        try:\n            return super().to_representation(instance)\n        except ErrorResponse as e:\n            message = e.message",
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "SearchSerializer",
        "kind": 6,
        "importPath": "app.serializers",
        "description": "app.serializers",
        "peekOfCode": "class SearchSerializer(serializers.Serializer):\n    query = serializers.CharField()\n    def create(self, validated_data):\n        query = validated_data['query']\n        models = self.get_searchable_models()\n        results = self.search_models(query, models)\n        return results\n    def search_models(self, query, models):\n        results = {}\n        for model in models:",
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "BaseViewSet",
        "kind": 6,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "class BaseViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    A base viewset that provides default queryset, serializer_class, and pagination_class.\n    \"\"\"\n    serializer_class = None\n    pagination_class = CustomPagination\n    ordering = '-pk'\n    def get_queryset(self):\n        \"\"\"\n        Returns the queryset that should be used for list views.",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "authentication.migrations.0001_initial",
        "description": "authentication.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('password', models.CharField(max_length=128, verbose_name='password')),",
        "detail": "authentication.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "kind": 6,
        "importPath": "authentication.admin",
        "description": "authentication.admin",
        "peekOfCode": "class UserAdmin(BaseUserAdmin):\n    fieldsets = (\n        (None, {'fields': ('email', 'password')}),\n        ('Personal info', {'fields': ('first_name', 'last_name')}),\n        ('Permissions', {'fields': ('is_active', 'is_staff', 'is_superuser')}),\n        ('Important dates', {'fields': ('last_login', 'date_joined')}),\n    )\n    add_fieldsets = (\n        (None, {\n            'classes': ('wide',),",
        "detail": "authentication.admin",
        "documentation": {}
    },
    {
        "label": "AuthenticationConfig",
        "kind": 6,
        "importPath": "authentication.apps",
        "description": "authentication.apps",
        "peekOfCode": "class AuthenticationConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'authentication'",
        "detail": "authentication.apps",
        "documentation": {}
    },
    {
        "label": "CustomUserCreationForm",
        "kind": 6,
        "importPath": "authentication.forms",
        "description": "authentication.forms",
        "peekOfCode": "class CustomUserCreationForm(UserCreationForm):\n    \"\"\"\n    A form that creates a user with no privileges, with an email field added to the standard fields.\n    \"\"\"\n    email = forms.EmailField(max_length=254, help_text=_('Required. Enter a valid email address.'))\n    password1 = forms.CharField(\n        label=_(\"Password\"),\n        strip=False,\n        widget=forms.PasswordInput,\n        help_text=_('Your password must contain at least 8 characters.'),",
        "detail": "authentication.forms",
        "documentation": {}
    },
    {
        "label": "CustomUserChangeForm",
        "kind": 6,
        "importPath": "authentication.forms",
        "description": "authentication.forms",
        "peekOfCode": "class CustomUserChangeForm(UserChangeForm):\n    class Meta:\n        model = User\n        fields = ('username', 'email')",
        "detail": "authentication.forms",
        "documentation": {}
    },
    {
        "label": "UserManager",
        "kind": 6,
        "importPath": "authentication.models",
        "description": "authentication.models",
        "peekOfCode": "class UserManager(BaseUserManager):\n    def create_user(self, email, password=None, **extra_fields):\n        email = self.normalize_email(email)\n        self.validate_email(email)\n        username = self.generate_username(extra_fields.get('first_name'))\n        user = self.model(email=email, username=username, **extra_fields)\n        if password:\n            user.set_password(password)\n        user.save(using=self._db)\n        return user",
        "detail": "authentication.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "authentication.models",
        "description": "authentication.models",
        "peekOfCode": "class User(AbstractBaseUser, PermissionsMixin, Searchable):\n    email = models.EmailField(unique=True, validators=[validate_email])\n    first_name = models.CharField(max_length=30, validators=[MaxLengthValidator(30)])\n    last_name = models.CharField(max_length=30, validators=[MaxLengthValidator(30)])\n    username = models.CharField(max_length=30, blank=True)\n    notification_preference=models.CharField(max_length=20, choices=NotificationPreference.choices, default=f\"{NotificationPreference.DATABASE},{NotificationPreference.EMAIL}\"),\n    is_active = models.BooleanField(default=True)\n    is_staff = models.BooleanField(default=False)\n    is_superuser = models.BooleanField(default=False)\n    date_joined = models.DateTimeField(default=timezone.now)",
        "detail": "authentication.models",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "authentication.serializers",
        "description": "authentication.serializers",
        "peekOfCode": "class UserSerializer(BaseSerializer):\n    \"\"\"\n    Serializer for User model.\n    \"\"\"\n    password1 = serializers.CharField(write_only=True)\n    password2 = serializers.CharField(write_only=True)\n    class Meta:\n        model = User\n        fields = ['id','first_name', 'last_name', 'email', 'password', 'password1', 'password2']\n        extra_kwargs = {'password': {'write_only': True,'style': {'input_type': 'password'}}}",
        "detail": "authentication.serializers",
        "documentation": {}
    },
    {
        "label": "DeleteUserProfileSerializer",
        "kind": 6,
        "importPath": "authentication.serializers",
        "description": "authentication.serializers",
        "peekOfCode": "class DeleteUserProfileSerializer(BaseSerializer):\n    email = serializers.EmailField()\n    class Meta:\n        model = User\n        fields = ['email']\n    def delete_user(self):\n        logged = self.context['user']\n        if logged.email != self.validated_data['email']:\n            raise ErrorResponse.custom_validation_error('Invalid email address entered.', status.HTTP_400_BAD_REQUEST)\n        try:",
        "detail": "authentication.serializers",
        "documentation": {}
    },
    {
        "label": "PasswordResetSerializer",
        "kind": 6,
        "importPath": "authentication.serializers",
        "description": "authentication.serializers",
        "peekOfCode": "class PasswordResetSerializer(BaseSerializer):\n    email = serializers.EmailField(style={'input_type': 'email'})\n    class Meta:\n        model = User\n        fields = ['email']\n    def validate_email(self, value):\n        try:\n            self.user = User.objects.get(email=value)\n        except ObjectDoesNotExist:\n            raise ErrorResponse.custom_validation_error('User with this email address does not exist.', status.HTTP_409_CONFLICT)",
        "detail": "authentication.serializers",
        "documentation": {}
    },
    {
        "label": "PasswordChangeSerializer",
        "kind": 6,
        "importPath": "authentication.serializers",
        "description": "authentication.serializers",
        "peekOfCode": "class PasswordChangeSerializer(UserSerializer):\n    old_password = serializers.CharField(style={'input_type': 'password'}, required=False)\n    new_password = serializers.CharField(style={'input_type': 'password'})\n    class Meta:\n        model = User\n        fields = ['old_password', 'new_password']\n    def validate_old_password(self, value):\n        user = self.context['request'].user\n        if not check_password(value, user.password):\n            raise ErrorResponse.custom_validation_error('Incorrect old password', status.HTTP_400_BAD_REQUEST)",
        "detail": "authentication.serializers",
        "documentation": {}
    },
    {
        "label": "PasswordResetConfirmSerializer",
        "kind": 6,
        "importPath": "authentication.serializers",
        "description": "authentication.serializers",
        "peekOfCode": "class PasswordResetConfirmSerializer(UserSerializer):\n    \"\"\"\n    Serializer for resetting password confirm view.\n    \"\"\"\n    new_password = serializers.CharField(write_only=True, required=True, style={'input_type': 'password'})\n    confirm_password = serializers.CharField(write_only=True, required=True, style={'input_type': 'password'})\n    uidb64 = serializers.CharField(required=True)\n    token = serializers.CharField(required=True)\n    class Meta:\n        model = User",
        "detail": "authentication.serializers",
        "documentation": {}
    },
    {
        "label": "LoginSerializer",
        "kind": 6,
        "importPath": "authentication.serializers",
        "description": "authentication.serializers",
        "peekOfCode": "class LoginSerializer(UserSerializer):\n    email = serializers.EmailField(style={'input_type': 'email'})\n    password = serializers.CharField(style={'input_type':'password'})\n    class Meta:\n        model = User\n        fields = ['email', 'password']\n    def validate(self, data):\n        email = data.get('email')\n        password = data.get('password')\n        if email and password:",
        "detail": "authentication.serializers",
        "documentation": {}
    },
    {
        "label": "UserViewSet",
        "kind": 6,
        "importPath": "authentication.test_view",
        "description": "authentication.test_view",
        "peekOfCode": "class UserViewSet(BaseViewSet):\n    model = User\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    lookup_field = 'pk'\n    def get_serializer_class(self):\n        if self.action == 'reset_password':\n            return PasswordResetSerializer\n        elif self.action == 'change_password':\n            return PasswordChangeSerializer",
        "detail": "authentication.test_view",
        "documentation": {}
    },
    {
        "label": "EmailAuthToken",
        "kind": 6,
        "importPath": "authentication.test_view",
        "description": "authentication.test_view",
        "peekOfCode": "class EmailAuthToken(ObtainAuthToken):\n    def post(self, request, *args, **kwargs):\n        email = request.data.get('email', None)\n        password = request.data.get('password', None)\n        if email is None or password is None:\n            return Response({'error': 'Please provide both email and password'},\n                            status=HTTP_400_BAD_REQUEST)\n        user = authenticate(request, email=email, password=password)\n        if not user:\n            return Response({'error': 'Invalid email or password'},",
        "detail": "authentication.test_view",
        "documentation": {}
    },
    {
        "label": "SearchView",
        "kind": 6,
        "importPath": "authentication.test_view",
        "description": "authentication.test_view",
        "peekOfCode": "class SearchView(generics.GenericAPIView):\n    serializer_class = SearchSerializer\n    def post(self, request):\n        serializer = self.get_serializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        results = serializer.save()\n        return Response(results)",
        "detail": "authentication.test_view",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "authentication.urls",
        "description": "authentication.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'api/users', UserViewSet, basename='user')\nurlpatterns = [\n    path('auth/',obtain_auth_token),\n    path('api-login/', EmailAuthToken.as_view(), name='api_login'),\n    path('api-auth/', include('rest_framework.urls')),\n    path('', include(router.urls)),\n    path('search/', SearchView.as_view(), name='search'),\n    path('get-user-id/', GetUserIDView.as_view(), name='get_user_id'),\n    path('users/reset_password_confirm/<str:uidb64>/<str:token>/', UserViewSet.as_view({'post': 'password_reset_confirm'}), name='password_reset_confirm'),",
        "detail": "authentication.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "authentication.urls",
        "description": "authentication.urls",
        "peekOfCode": "urlpatterns = [\n    path('auth/',obtain_auth_token),\n    path('api-login/', EmailAuthToken.as_view(), name='api_login'),\n    path('api-auth/', include('rest_framework.urls')),\n    path('', include(router.urls)),\n    path('search/', SearchView.as_view(), name='search'),\n    path('get-user-id/', GetUserIDView.as_view(), name='get_user_id'),\n    path('users/reset_password_confirm/<str:uidb64>/<str:token>/', UserViewSet.as_view({'post': 'password_reset_confirm'}), name='password_reset_confirm'),\n]",
        "detail": "authentication.urls",
        "documentation": {}
    },
    {
        "label": "GetUserIDView",
        "kind": 6,
        "importPath": "authentication.views",
        "description": "authentication.views",
        "peekOfCode": "class GetUserIDView(APIView):\n    authentication_classes = [authentication.TokenAuthentication]\n    permission_classes = [permissions.IsAuthenticated]\n    def get(self, request, format=None):\n        user_id = request.user.id\n        return Response({'user_id': user_id})\nclass UserViewSet(BaseViewSet):\n    \"\"\"\n    A viewset for managing users.\n    \"\"\"",
        "detail": "authentication.views",
        "documentation": {}
    },
    {
        "label": "UserViewSet",
        "kind": 6,
        "importPath": "authentication.views",
        "description": "authentication.views",
        "peekOfCode": "class UserViewSet(BaseViewSet):\n    \"\"\"\n    A viewset for managing users.\n    \"\"\"\n    serializer_class = UserSerializer\n    lookup_field = 'pk'\n    def destroy(self, request, *args, **kwargs):\n        serializer_class = DeleteUserProfileSerializer\n        user = self.get_object()\n        serializer = self.get_serializer(data=request.data, context={'request': request, 'user': user})",
        "detail": "authentication.views",
        "documentation": {}
    },
    {
        "label": "EmailAuthToken",
        "kind": 6,
        "importPath": "authentication.views",
        "description": "authentication.views",
        "peekOfCode": "class EmailAuthToken(ObtainAuthToken):\n    def post(self, request, *args, **kwargs):\n        email = request.data.get('email', None)\n        password = request.data.get('password', None)\n        if email is None or password is None:\n            return Response({'detail': 'Please provide both email and password'},\n                            status=status.HTTP_400_BAD_REQUEST)\n        user = authenticate(request, email=email, password=password)\n        if not user:\n            return Response({'detail': 'Invalid email or password'},",
        "detail": "authentication.views",
        "documentation": {}
    },
    {
        "label": "SearchView",
        "kind": 6,
        "importPath": "authentication.views",
        "description": "authentication.views",
        "peekOfCode": "class SearchView(generics.GenericAPIView):\n    serializer_class = SearchSerializer\n    def post(self, request):\n        serializer = self.get_serializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        results = serializer.save()\n        return Response(results)",
        "detail": "authentication.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "chronicles.asgi",
        "description": "chronicles.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "chronicles.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = config('SECRET_KEY')\nOPENAI_API_KEY = config('OPENAI_API_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = config('DEBUG', False)\nALLOWED_HOSTS = ['127.0.0.1','eebd-102-212-236-175.ngrok-free.app']\nCSRF_TRUSTED_ORIGINS = ['https://eebd-102-212-236-175.ngrok-free.app']",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "SECRET_KEY = config('SECRET_KEY')\nOPENAI_API_KEY = config('OPENAI_API_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = config('DEBUG', False)\nALLOWED_HOSTS = ['127.0.0.1','eebd-102-212-236-175.ngrok-free.app']\nCSRF_TRUSTED_ORIGINS = ['https://eebd-102-212-236-175.ngrok-free.app']\nAUTH_USER_MODEL = 'authentication.User'\n# Application definition\nINSTALLED_APPS = [\n    'app.apps.MyAdminConfig',",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_KEY",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "OPENAI_API_KEY = config('OPENAI_API_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = config('DEBUG', False)\nALLOWED_HOSTS = ['127.0.0.1','eebd-102-212-236-175.ngrok-free.app']\nCSRF_TRUSTED_ORIGINS = ['https://eebd-102-212-236-175.ngrok-free.app']\nAUTH_USER_MODEL = 'authentication.User'\n# Application definition\nINSTALLED_APPS = [\n    'app.apps.MyAdminConfig',\n    #'django.contrib.admin',",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "DEBUG = config('DEBUG', False)\nALLOWED_HOSTS = ['127.0.0.1','eebd-102-212-236-175.ngrok-free.app']\nCSRF_TRUSTED_ORIGINS = ['https://eebd-102-212-236-175.ngrok-free.app']\nAUTH_USER_MODEL = 'authentication.User'\n# Application definition\nINSTALLED_APPS = [\n    'app.apps.MyAdminConfig',\n    #'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['127.0.0.1','eebd-102-212-236-175.ngrok-free.app']\nCSRF_TRUSTED_ORIGINS = ['https://eebd-102-212-236-175.ngrok-free.app']\nAUTH_USER_MODEL = 'authentication.User'\n# Application definition\nINSTALLED_APPS = [\n    'app.apps.MyAdminConfig',\n    #'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_TRUSTED_ORIGINS",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "CSRF_TRUSTED_ORIGINS = ['https://eebd-102-212-236-175.ngrok-free.app']\nAUTH_USER_MODEL = 'authentication.User'\n# Application definition\nINSTALLED_APPS = [\n    'app.apps.MyAdminConfig',\n    #'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'authentication.User'\n# Application definition\nINSTALLED_APPS = [\n    'app.apps.MyAdminConfig',\n    #'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'app.apps.MyAdminConfig',\n    #'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'formtools',\n    'authentication',",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    #'utils.middleware.ErrorHandlerMiddleware',\n    #'utils.middleware.my_exception_handler',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "ROOT_URLCONF = 'chronicles.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': ['templates',],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': ['templates',],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "WSGI_APPLICATION = 'chronicles.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = config('TIME_ZONE', 'UTC')\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = BASE_DIR /'static'\nSTATICFILES_DIRS = [\n    'chronicles/static',",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "TIME_ZONE = config('TIME_ZONE', 'UTC')\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = BASE_DIR /'static'\nSTATICFILES_DIRS = [\n    'chronicles/static',\n]",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = BASE_DIR /'static'\nSTATICFILES_DIRS = [\n    'chronicles/static',\n]\nMEDIA_URL = '/media/'",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = BASE_DIR /'static'\nSTATICFILES_DIRS = [\n    'chronicles/static',\n]\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR /'media'",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATIC_ROOT = BASE_DIR /'static'\nSTATICFILES_DIRS = [\n    'chronicles/static',\n]\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR /'media'\nAPP_DOMAIN = config('APP_DOMAIN','eleso.ltd') \nAPP_NAME = config('APP_NAME','Eleso Ltd')\nAPP_TAGLINE = config('APP_TAGLINE')",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "STATIC_ROOT = BASE_DIR /'static'\nSTATICFILES_DIRS = [\n    'chronicles/static',\n]\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR /'media'\nAPP_DOMAIN = config('APP_DOMAIN','eleso.ltd') \nAPP_NAME = config('APP_NAME','Eleso Ltd')\nAPP_TAGLINE = config('APP_TAGLINE')\nLOGIN_REDIRECT_URL = '/'",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    'chronicles/static',\n]\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR /'media'\nAPP_DOMAIN = config('APP_DOMAIN','eleso.ltd') \nAPP_NAME = config('APP_NAME','Eleso Ltd')\nAPP_TAGLINE = config('APP_TAGLINE')\nLOGIN_REDIRECT_URL = '/'\nLOGIN_URL = 'login'",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR /'media'\nAPP_DOMAIN = config('APP_DOMAIN','eleso.ltd') \nAPP_NAME = config('APP_NAME','Eleso Ltd')\nAPP_TAGLINE = config('APP_TAGLINE')\nLOGIN_REDIRECT_URL = '/'\nLOGIN_URL = 'login'\nLOGOUT_URL = 'logout'\nPAGE_SIZE =config('PAGE_SIZE')\nMAX_PAGE_SIZE = config('MAX_PAGE_SIZE')",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "MEDIA_ROOT = BASE_DIR /'media'\nAPP_DOMAIN = config('APP_DOMAIN','eleso.ltd') \nAPP_NAME = config('APP_NAME','Eleso Ltd')\nAPP_TAGLINE = config('APP_TAGLINE')\nLOGIN_REDIRECT_URL = '/'\nLOGIN_URL = 'login'\nLOGOUT_URL = 'logout'\nPAGE_SIZE =config('PAGE_SIZE')\nMAX_PAGE_SIZE = config('MAX_PAGE_SIZE')\nEMAIL_HOST = config('EMAIL_HOST')",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "APP_DOMAIN",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "APP_DOMAIN = config('APP_DOMAIN','eleso.ltd') \nAPP_NAME = config('APP_NAME','Eleso Ltd')\nAPP_TAGLINE = config('APP_TAGLINE')\nLOGIN_REDIRECT_URL = '/'\nLOGIN_URL = 'login'\nLOGOUT_URL = 'logout'\nPAGE_SIZE =config('PAGE_SIZE')\nMAX_PAGE_SIZE = config('MAX_PAGE_SIZE')\nEMAIL_HOST = config('EMAIL_HOST')\nEMAIL_HOST_USER = config('EMAIL_HOST_USER')",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "APP_NAME",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "APP_NAME = config('APP_NAME','Eleso Ltd')\nAPP_TAGLINE = config('APP_TAGLINE')\nLOGIN_REDIRECT_URL = '/'\nLOGIN_URL = 'login'\nLOGOUT_URL = 'logout'\nPAGE_SIZE =config('PAGE_SIZE')\nMAX_PAGE_SIZE = config('MAX_PAGE_SIZE')\nEMAIL_HOST = config('EMAIL_HOST')\nEMAIL_HOST_USER = config('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "APP_TAGLINE",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "APP_TAGLINE = config('APP_TAGLINE')\nLOGIN_REDIRECT_URL = '/'\nLOGIN_URL = 'login'\nLOGOUT_URL = 'logout'\nPAGE_SIZE =config('PAGE_SIZE')\nMAX_PAGE_SIZE = config('MAX_PAGE_SIZE')\nEMAIL_HOST = config('EMAIL_HOST')\nEMAIL_HOST_USER = config('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')\nEMAIL_PORT = config('EMAIL_PORT',587)",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "LOGIN_REDIRECT_URL = '/'\nLOGIN_URL = 'login'\nLOGOUT_URL = 'logout'\nPAGE_SIZE =config('PAGE_SIZE')\nMAX_PAGE_SIZE = config('MAX_PAGE_SIZE')\nEMAIL_HOST = config('EMAIL_HOST')\nEMAIL_HOST_USER = config('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')\nEMAIL_PORT = config('EMAIL_PORT',587)\nEMAIL_USE_TLS = config('EMAIL_USE_TLS', True)",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_URL",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "LOGIN_URL = 'login'\nLOGOUT_URL = 'logout'\nPAGE_SIZE =config('PAGE_SIZE')\nMAX_PAGE_SIZE = config('MAX_PAGE_SIZE')\nEMAIL_HOST = config('EMAIL_HOST')\nEMAIL_HOST_USER = config('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')\nEMAIL_PORT = config('EMAIL_PORT',587)\nEMAIL_USE_TLS = config('EMAIL_USE_TLS', True)\n#EMAIL_USE_SSL = config('EMAIL_USE_SSL',False)",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "LOGOUT_URL",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "LOGOUT_URL = 'logout'\nPAGE_SIZE =config('PAGE_SIZE')\nMAX_PAGE_SIZE = config('MAX_PAGE_SIZE')\nEMAIL_HOST = config('EMAIL_HOST')\nEMAIL_HOST_USER = config('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')\nEMAIL_PORT = config('EMAIL_PORT',587)\nEMAIL_USE_TLS = config('EMAIL_USE_TLS', True)\n#EMAIL_USE_SSL = config('EMAIL_USE_SSL',False)\nEMAIL_SUBJECT_PREFIX = config('EMAIL_SUBJECT_PREFIX')",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "MAX_PAGE_SIZE",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "MAX_PAGE_SIZE = config('MAX_PAGE_SIZE')\nEMAIL_HOST = config('EMAIL_HOST')\nEMAIL_HOST_USER = config('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')\nEMAIL_PORT = config('EMAIL_PORT',587)\nEMAIL_USE_TLS = config('EMAIL_USE_TLS', True)\n#EMAIL_USE_SSL = config('EMAIL_USE_SSL',False)\nEMAIL_SUBJECT_PREFIX = config('EMAIL_SUBJECT_PREFIX')\nEMAIL_USE_REMEMBER_ME = config('EMAIL_USE_REMEMBER_ME', True)\nEMAIL_SUPPORT = config('EMAIL_SUPPORT')",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "EMAIL_HOST = config('EMAIL_HOST')\nEMAIL_HOST_USER = config('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')\nEMAIL_PORT = config('EMAIL_PORT',587)\nEMAIL_USE_TLS = config('EMAIL_USE_TLS', True)\n#EMAIL_USE_SSL = config('EMAIL_USE_SSL',False)\nEMAIL_SUBJECT_PREFIX = config('EMAIL_SUBJECT_PREFIX')\nEMAIL_USE_REMEMBER_ME = config('EMAIL_USE_REMEMBER_ME', True)\nEMAIL_SUPPORT = config('EMAIL_SUPPORT')\nGOOGLE_MAPS_API_KEY = config('GOOGLE_MAPS_API_KEY')",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "EMAIL_HOST_USER = config('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')\nEMAIL_PORT = config('EMAIL_PORT',587)\nEMAIL_USE_TLS = config('EMAIL_USE_TLS', True)\n#EMAIL_USE_SSL = config('EMAIL_USE_SSL',False)\nEMAIL_SUBJECT_PREFIX = config('EMAIL_SUBJECT_PREFIX')\nEMAIL_USE_REMEMBER_ME = config('EMAIL_USE_REMEMBER_ME', True)\nEMAIL_SUPPORT = config('EMAIL_SUPPORT')\nGOOGLE_MAPS_API_KEY = config('GOOGLE_MAPS_API_KEY')\n# Default primary key field type",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')\nEMAIL_PORT = config('EMAIL_PORT',587)\nEMAIL_USE_TLS = config('EMAIL_USE_TLS', True)\n#EMAIL_USE_SSL = config('EMAIL_USE_SSL',False)\nEMAIL_SUBJECT_PREFIX = config('EMAIL_SUBJECT_PREFIX')\nEMAIL_USE_REMEMBER_ME = config('EMAIL_USE_REMEMBER_ME', True)\nEMAIL_SUPPORT = config('EMAIL_SUPPORT')\nGOOGLE_MAPS_API_KEY = config('GOOGLE_MAPS_API_KEY')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "EMAIL_PORT = config('EMAIL_PORT',587)\nEMAIL_USE_TLS = config('EMAIL_USE_TLS', True)\n#EMAIL_USE_SSL = config('EMAIL_USE_SSL',False)\nEMAIL_SUBJECT_PREFIX = config('EMAIL_SUBJECT_PREFIX')\nEMAIL_USE_REMEMBER_ME = config('EMAIL_USE_REMEMBER_ME', True)\nEMAIL_SUPPORT = config('EMAIL_SUPPORT')\nGOOGLE_MAPS_API_KEY = config('GOOGLE_MAPS_API_KEY')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "EMAIL_USE_TLS = config('EMAIL_USE_TLS', True)\n#EMAIL_USE_SSL = config('EMAIL_USE_SSL',False)\nEMAIL_SUBJECT_PREFIX = config('EMAIL_SUBJECT_PREFIX')\nEMAIL_USE_REMEMBER_ME = config('EMAIL_USE_REMEMBER_ME', True)\nEMAIL_SUPPORT = config('EMAIL_SUPPORT')\nGOOGLE_MAPS_API_KEY = config('GOOGLE_MAPS_API_KEY')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nREST_FRAMEWORK = {",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "#EMAIL_USE_SSL",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "#EMAIL_USE_SSL = config('EMAIL_USE_SSL',False)\nEMAIL_SUBJECT_PREFIX = config('EMAIL_SUBJECT_PREFIX')\nEMAIL_USE_REMEMBER_ME = config('EMAIL_USE_REMEMBER_ME', True)\nEMAIL_SUPPORT = config('EMAIL_SUPPORT')\nGOOGLE_MAPS_API_KEY = config('GOOGLE_MAPS_API_KEY')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_SUBJECT_PREFIX",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "EMAIL_SUBJECT_PREFIX = config('EMAIL_SUBJECT_PREFIX')\nEMAIL_USE_REMEMBER_ME = config('EMAIL_USE_REMEMBER_ME', True)\nEMAIL_SUPPORT = config('EMAIL_SUPPORT')\nGOOGLE_MAPS_API_KEY = config('GOOGLE_MAPS_API_KEY')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.TokenAuthentication',",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_REMEMBER_ME",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "EMAIL_USE_REMEMBER_ME = config('EMAIL_USE_REMEMBER_ME', True)\nEMAIL_SUPPORT = config('EMAIL_SUPPORT')\nGOOGLE_MAPS_API_KEY = config('GOOGLE_MAPS_API_KEY')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.TokenAuthentication',\n    ],",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_SUPPORT",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "EMAIL_SUPPORT = config('EMAIL_SUPPORT')\nGOOGLE_MAPS_API_KEY = config('GOOGLE_MAPS_API_KEY')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.TokenAuthentication',\n    ],\n    #'EXCEPTION_HANDLER': 'app.exceptions.my_exception_handler'",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "GOOGLE_MAPS_API_KEY",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "GOOGLE_MAPS_API_KEY = config('GOOGLE_MAPS_API_KEY')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.TokenAuthentication',\n    ],\n    #'EXCEPTION_HANDLER': 'app.exceptions.my_exception_handler'\n}",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.TokenAuthentication',\n    ],\n    #'EXCEPTION_HANDLER': 'app.exceptions.my_exception_handler'\n}\n# GOOGLE_API_MAP\nGDAL_LIBRARY_PATH = '/usr/lib/libgdal.so'\n# Redis configuration",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.TokenAuthentication',\n    ],\n    #'EXCEPTION_HANDLER': 'app.exceptions.my_exception_handler'\n}\n# GOOGLE_API_MAP\nGDAL_LIBRARY_PATH = '/usr/lib/libgdal.so'\n# Redis configuration\nREDIS_HOST = config('REDIS_HOST', default='127.0.0.1')",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "GDAL_LIBRARY_PATH",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "GDAL_LIBRARY_PATH = '/usr/lib/libgdal.so'\n# Redis configuration\nREDIS_HOST = config('REDIS_HOST', default='127.0.0.1')\nREDIS_PORT = config('REDIS_PORT', default=6379, cast=int)\nREDIS_DB = config('REDIS_DB', default=0, cast=int)\n# Cache configuration\nCACHE_TTL = config('CACHE_TTL', default=300, cast=int)\nCACHES = {\n    'default': {\n        'BACKEND': 'django_redis.cache.RedisCache',",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "REDIS_HOST",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "REDIS_HOST = config('REDIS_HOST', default='127.0.0.1')\nREDIS_PORT = config('REDIS_PORT', default=6379, cast=int)\nREDIS_DB = config('REDIS_DB', default=0, cast=int)\n# Cache configuration\nCACHE_TTL = config('CACHE_TTL', default=300, cast=int)\nCACHES = {\n    'default': {\n        'BACKEND': 'django_redis.cache.RedisCache',\n        'LOCATION': f\"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}\",\n        'OPTIONS': {",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "REDIS_PORT",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "REDIS_PORT = config('REDIS_PORT', default=6379, cast=int)\nREDIS_DB = config('REDIS_DB', default=0, cast=int)\n# Cache configuration\nCACHE_TTL = config('CACHE_TTL', default=300, cast=int)\nCACHES = {\n    'default': {\n        'BACKEND': 'django_redis.cache.RedisCache',\n        'LOCATION': f\"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}\",\n        'OPTIONS': {\n            'CLIENT_CLASS': 'django_redis.client.DefaultClient',",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "REDIS_DB",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "REDIS_DB = config('REDIS_DB', default=0, cast=int)\n# Cache configuration\nCACHE_TTL = config('CACHE_TTL', default=300, cast=int)\nCACHES = {\n    'default': {\n        'BACKEND': 'django_redis.cache.RedisCache',\n        'LOCATION': f\"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}\",\n        'OPTIONS': {\n            'CLIENT_CLASS': 'django_redis.client.DefaultClient',\n        }",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "CACHE_TTL",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "CACHE_TTL = config('CACHE_TTL', default=300, cast=int)\nCACHES = {\n    'default': {\n        'BACKEND': 'django_redis.cache.RedisCache',\n        'LOCATION': f\"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}\",\n        'OPTIONS': {\n            'CLIENT_CLASS': 'django_redis.client.DefaultClient',\n        }\n    }\n}",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "CACHES",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "CACHES = {\n    'default': {\n        'BACKEND': 'django_redis.cache.RedisCache',\n        'LOCATION': f\"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}\",\n        'OPTIONS': {\n            'CLIENT_CLASS': 'django_redis.client.DefaultClient',\n        }\n    }\n}\nLOGGING = {",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "LOGGING",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "LOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n        },\n    },\n    'loggers': {\n        'django.cache': {",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "CACHE_TTL",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "CACHE_TTL = 60 * 5  # cache for 5 minutes\nSTATIC_URL = 'static/'\nSTATIC_ROOT = BASE_DIR /'static'\nSTATICFILES_DIRS = [\n    'app/static',\n]",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATIC_ROOT = BASE_DIR /'static'\nSTATICFILES_DIRS = [\n    'app/static',\n]",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "STATIC_ROOT = BASE_DIR /'static'\nSTATICFILES_DIRS = [\n    'app/static',\n]",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "chronicles.settings",
        "description": "chronicles.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    'app/static',\n]",
        "detail": "chronicles.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "chronicles.urls",
        "description": "chronicles.urls",
        "peekOfCode": "urlpatterns = [\n    path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),\n    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n    path('admin/', admin.site.urls),\n    path('',include('authentication.urls')),\n    path('',include('client.urls')),\n    path('api/', include('notifications.urls')),\n    path('api/',include('clinics.urls')),\n    path('api/',include('pharmacy.urls')),\n    path('api/',include('consultations.urls'))",
        "detail": "chronicles.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "chronicles.wsgi",
        "description": "chronicles.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "chronicles.wsgi",
        "documentation": {}
    },
    {
        "label": "ClientConfig",
        "kind": 6,
        "importPath": "client.apps",
        "description": "client.apps",
        "peekOfCode": "class ClientConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'client'",
        "detail": "client.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "client.urls",
        "description": "client.urls",
        "peekOfCode": "urlpatterns = [\n    path('dashboard',views.dashboard,name='dashboard'),\n    path('notifications',views.notifications,name='notification'),\n    path('clinics',views.clinics,name='clinic'),\n    path('appointments',views.appointments,name='appointment'),\n    path('support',views.support,name='support'),\n    path('register',views.register_request,name='register'),\n    path('login',views.login_request,name='view_login'),\n    path('logout',views.logout_request,name='logout'),\n    path('terms-and-conditions',views.terms_and_conditions,name='terms_and_conditions'),",
        "detail": "client.urls",
        "documentation": {}
    },
    {
        "label": "register_request",
        "kind": 2,
        "importPath": "client.views",
        "description": "client.views",
        "peekOfCode": "def register_request(request):\n    rendered = render(request, 'register.html')\n    return HttpResponse(rendered)\ndef login_request(request):\n    rendered = render(request, 'login.html')\n    return HttpResponse(rendered)\ndef logout_request(request):\n    rendered = render(request, 'login.html')\n    return HttpResponse(rendered)\ndef dashboard(request):",
        "detail": "client.views",
        "documentation": {}
    },
    {
        "label": "login_request",
        "kind": 2,
        "importPath": "client.views",
        "description": "client.views",
        "peekOfCode": "def login_request(request):\n    rendered = render(request, 'login.html')\n    return HttpResponse(rendered)\ndef logout_request(request):\n    rendered = render(request, 'login.html')\n    return HttpResponse(rendered)\ndef dashboard(request):\n    rendered = render(request, 'basic/dashboard.html')\n    return HttpResponse(rendered)\ndef notifications(request):",
        "detail": "client.views",
        "documentation": {}
    },
    {
        "label": "logout_request",
        "kind": 2,
        "importPath": "client.views",
        "description": "client.views",
        "peekOfCode": "def logout_request(request):\n    rendered = render(request, 'login.html')\n    return HttpResponse(rendered)\ndef dashboard(request):\n    rendered = render(request, 'basic/dashboard.html')\n    return HttpResponse(rendered)\ndef notifications(request):\n    tabs = [\n        {'id': 'tab1', 'title': 'New Notifications', 'template_name': 'notifications/new_notifications.html'},\n        {'id': 'tab2', 'title': 'Read Notifications', 'template_name': 'notifications/read_notifications.html'},",
        "detail": "client.views",
        "documentation": {}
    },
    {
        "label": "dashboard",
        "kind": 2,
        "importPath": "client.views",
        "description": "client.views",
        "peekOfCode": "def dashboard(request):\n    rendered = render(request, 'basic/dashboard.html')\n    return HttpResponse(rendered)\ndef notifications(request):\n    tabs = [\n        {'id': 'tab1', 'title': 'New Notifications', 'template_name': 'notifications/new_notifications.html'},\n        {'id': 'tab2', 'title': 'Read Notifications', 'template_name': 'notifications/read_notifications.html'},\n        {'id': 'tab3', 'title': 'All Notifications', 'template_name': 'notifications/all_notifications.html'},\n    ]\n    context = {'tabs': tabs}",
        "detail": "client.views",
        "documentation": {}
    },
    {
        "label": "notifications",
        "kind": 2,
        "importPath": "client.views",
        "description": "client.views",
        "peekOfCode": "def notifications(request):\n    tabs = [\n        {'id': 'tab1', 'title': 'New Notifications', 'template_name': 'notifications/new_notifications.html'},\n        {'id': 'tab2', 'title': 'Read Notifications', 'template_name': 'notifications/read_notifications.html'},\n        {'id': 'tab3', 'title': 'All Notifications', 'template_name': 'notifications/all_notifications.html'},\n    ]\n    context = {'tabs': tabs}\n    rendered = render(request, 'notifications/index.html',context=context)\n    return HttpResponse(rendered)\ndef medicalrecords(request):",
        "detail": "client.views",
        "documentation": {}
    },
    {
        "label": "medicalrecords",
        "kind": 2,
        "importPath": "client.views",
        "description": "client.views",
        "peekOfCode": "def medicalrecords(request):\n    tabs = [\n        {'id': 'tab1', 'title': 'About Medical Records', 'template_name': 'medicalrecords/about_medical_records.html'},\n        {'id': 'tab2', 'title': 'My Medical History', 'template_name': 'medicalrecords/medical_history.html'},\n        {'id': 'tab3', 'title': 'Prescription Refill', 'template_name': 'medicalrecords/prescription_refill.html'},\n    ]\n    context = {'tabs': tabs}\n    rendered = render(request, 'medicalrecords/index.html',context=context)\n    return HttpResponse(rendered)\ndef consultations(request):",
        "detail": "client.views",
        "documentation": {}
    },
    {
        "label": "consultations",
        "kind": 2,
        "importPath": "client.views",
        "description": "client.views",
        "peekOfCode": "def consultations(request):\n    tabs = [\n        {'id': 'tab1', 'title': 'Consult', 'template_name': 'consultations/consult.html'},\n        {'id': 'tab2', 'title': 'About Consultations', 'template_name': 'consultations/about_consultations.html'},\n    ]\n    context = {'tabs': tabs}\n    rendered = render(request, 'consultations/index.html',context=context)\n    return HttpResponse(rendered)\ndef clinics(request):\n    tabs = [",
        "detail": "client.views",
        "documentation": {}
    },
    {
        "label": "clinics",
        "kind": 2,
        "importPath": "client.views",
        "description": "client.views",
        "peekOfCode": "def clinics(request):\n    tabs = [\n        {'id': 'tab1', 'title': 'Clinics Near Me', 'template_name': 'clinics/clinics_near_me.html'},\n        {'id': 'tab2', 'title': 'New Clinics', 'template_name': 'clinics/new_clinics.html'},\n        {'id': 'tab3', 'title': 'Previously Visited Clinics', 'template_name': 'clinics/visited_clinics.html'},\n    ]\n    context = {'tabs': tabs}\n    rendered = render(request, 'clinics/index.html',context=context)\n    return HttpResponse(rendered)\ndef appointments(request):",
        "detail": "client.views",
        "documentation": {}
    },
    {
        "label": "appointments",
        "kind": 2,
        "importPath": "client.views",
        "description": "client.views",
        "peekOfCode": "def appointments(request):\n    tabs = [\n        {'id': 'tab1', 'title': 'About Appointments', 'template_name': 'appointments/about_appointment.html'},\n        {'id': 'tab2', 'title': 'Book Appointment', 'template_name': 'appointments/book_appointment.html'},\n        {'id': 'tab3', 'title': 'My Recent Appointments', 'template_name': 'appointments/recent_appointment.html'},\n    ]\n    context = {'tabs': tabs}\n    rendered = render(request, 'appointments/index.html',context)\n    return HttpResponse(rendered)\ndef support(request):",
        "detail": "client.views",
        "documentation": {}
    },
    {
        "label": "support",
        "kind": 2,
        "importPath": "client.views",
        "description": "client.views",
        "peekOfCode": "def support(request):\n    rendered = render(request, 'contact/support.html')\n    return HttpResponse(rendered)\ndef about(request):\n    rendered = render(request, 'contact/about.html')\n    return HttpResponse(rendered)\ndef terms_and_conditions(request):\n    rendered = render(request, 'contact/terms-conditions.html')\n    return HttpResponse(rendered)\ndef privacy_policy(request):",
        "detail": "client.views",
        "documentation": {}
    },
    {
        "label": "about",
        "kind": 2,
        "importPath": "client.views",
        "description": "client.views",
        "peekOfCode": "def about(request):\n    rendered = render(request, 'contact/about.html')\n    return HttpResponse(rendered)\ndef terms_and_conditions(request):\n    rendered = render(request, 'contact/terms-conditions.html')\n    return HttpResponse(rendered)\ndef privacy_policy(request):\n    rendered = render(request, 'contact/privacy-policy.html')\n    return HttpResponse(rendered)\ndef forgot_password(request):",
        "detail": "client.views",
        "documentation": {}
    },
    {
        "label": "terms_and_conditions",
        "kind": 2,
        "importPath": "client.views",
        "description": "client.views",
        "peekOfCode": "def terms_and_conditions(request):\n    rendered = render(request, 'contact/terms-conditions.html')\n    return HttpResponse(rendered)\ndef privacy_policy(request):\n    rendered = render(request, 'contact/privacy-policy.html')\n    return HttpResponse(rendered)\ndef forgot_password(request):\n    rendered = render(request, 'forgot_password.html')\n    return HttpResponse(rendered)\ndef search(request):",
        "detail": "client.views",
        "documentation": {}
    },
    {
        "label": "privacy_policy",
        "kind": 2,
        "importPath": "client.views",
        "description": "client.views",
        "peekOfCode": "def privacy_policy(request):\n    rendered = render(request, 'contact/privacy-policy.html')\n    return HttpResponse(rendered)\ndef forgot_password(request):\n    rendered = render(request, 'forgot_password.html')\n    return HttpResponse(rendered)\ndef search(request):\n    context={\"data\":{\n        'detail':\"Found Something\",\n        'url':\"http://eleso.ltd\",",
        "detail": "client.views",
        "documentation": {}
    },
    {
        "label": "forgot_password",
        "kind": 2,
        "importPath": "client.views",
        "description": "client.views",
        "peekOfCode": "def forgot_password(request):\n    rendered = render(request, 'forgot_password.html')\n    return HttpResponse(rendered)\ndef search(request):\n    context={\"data\":{\n        'detail':\"Found Something\",\n        'url':\"http://eleso.ltd\",\n    }}\n    return JsonResponse(request, context)",
        "detail": "client.views",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 2,
        "importPath": "client.views",
        "description": "client.views",
        "peekOfCode": "def search(request):\n    context={\"data\":{\n        'detail':\"Found Something\",\n        'url':\"http://eleso.ltd\",\n    }}\n    return JsonResponse(request, context)",
        "detail": "client.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "clinics.migrations.0001_initial",
        "description": "clinics.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Agreement',\n            fields=[",
        "detail": "clinics.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "clinics.migrations.0002_appointmenttype_max_slots_and_more",
        "description": "clinics.migrations.0002_appointmenttype_max_slots_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('clinics', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='appointmenttype',\n            name='max_slots',\n            field=models.IntegerField(default=100, validators=[django.core.validators.MinValueValidator(0)]),\n        ),",
        "detail": "clinics.migrations.0002_appointmenttype_max_slots_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "clinics.migrations.0003_clinicavailability_id_and_more",
        "description": "clinics.migrations.0003_clinicavailability_id_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('clinics', '0002_appointmenttype_max_slots_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='clinicavailability',\n            name='id',\n            field=models.BigAutoField(auto_created=True, default=1, primary_key=True, serialize=False, verbose_name='ID'),\n            preserve_default=False,",
        "detail": "clinics.migrations.0003_clinicavailability_id_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "clinics.migrations.0004_alter_appointment_clinic_alter_appointment_patient_and_more",
        "description": "clinics.migrations.0004_alter_appointment_clinic_alter_appointment_patient_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('clinics', '0003_clinicavailability_id_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='appointment',\n            name='clinic',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='clinic_appointments', related_query_name='clinic_appointments', to='clinics.clinic'),",
        "detail": "clinics.migrations.0004_alter_appointment_clinic_alter_appointment_patient_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "clinics.migrations.0005_alter_appointment_appointment_date_and_more",
        "description": "clinics.migrations.0005_alter_appointment_appointment_date_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('clinics', '0004_alter_appointment_clinic_alter_appointment_patient_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='appointment',\n            name='appointment_date',\n            field=models.DateField(verbose_name=models.TimeField()),\n        ),",
        "detail": "clinics.migrations.0005_alter_appointment_appointment_date_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "clinics.migrations.0006_appointment_appointment_reason_and_more",
        "description": "clinics.migrations.0006_appointment_appointment_reason_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('clinics', '0005_alter_appointment_appointment_date_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='appointment',\n            name='appointment_reason',\n            field=models.TextField(blank=True, null=True),\n        ),",
        "detail": "clinics.migrations.0006_appointment_appointment_reason_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "clinics.migrations.0007_delete_medicalrecord",
        "description": "clinics.migrations.0007_delete_medicalrecord",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('clinics', '0006_appointment_appointment_reason_and_more'),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name='MedicalRecord',\n        ),\n    ]",
        "detail": "clinics.migrations.0007_delete_medicalrecord",
        "documentation": {}
    },
    {
        "label": "LimitedCountryChoiceField",
        "kind": 6,
        "importPath": "clinics.admin",
        "description": "clinics.admin",
        "peekOfCode": "class LimitedCountryChoiceField(LazyTypedChoiceField):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.choices = [(code, name) for code, name in countries if name in ['Kenya', 'Uganda', 'Tanzania', 'South Sudan', 'Rwanda', 'Democratic Republic of the Congo']]\nclass HolidayAdminForm(forms.ModelForm):\n    country = LimitedCountryChoiceField(choices=[])\n    class Meta:\n        model = Holiday\n        fields = '__all__'\nclass ClinicAdminForm(forms.ModelForm):",
        "detail": "clinics.admin",
        "documentation": {}
    },
    {
        "label": "HolidayAdminForm",
        "kind": 6,
        "importPath": "clinics.admin",
        "description": "clinics.admin",
        "peekOfCode": "class HolidayAdminForm(forms.ModelForm):\n    country = LimitedCountryChoiceField(choices=[])\n    class Meta:\n        model = Holiday\n        fields = '__all__'\nclass ClinicAdminForm(forms.ModelForm):\n    country = LimitedCountryChoiceField(choices=[])\n    class Meta:\n        model = Holiday\n        fields = '__all__'",
        "detail": "clinics.admin",
        "documentation": {}
    },
    {
        "label": "ClinicAdminForm",
        "kind": 6,
        "importPath": "clinics.admin",
        "description": "clinics.admin",
        "peekOfCode": "class ClinicAdminForm(forms.ModelForm):\n    country = LimitedCountryChoiceField(choices=[])\n    class Meta:\n        model = Holiday\n        fields = '__all__'\n@admin.register(Holiday)\nclass HolidayAdmin(admin.ModelAdmin):\n    form = HolidayAdminForm\n    list_display = ('clinic', 'date', 'country')\n    list_filter = ('country',)",
        "detail": "clinics.admin",
        "documentation": {}
    },
    {
        "label": "HolidayAdmin",
        "kind": 6,
        "importPath": "clinics.admin",
        "description": "clinics.admin",
        "peekOfCode": "class HolidayAdmin(admin.ModelAdmin):\n    form = HolidayAdminForm\n    list_display = ('clinic', 'date', 'country')\n    list_filter = ('country',)\n    search_fields = ('clinic', 'country')\n    ordering = ('-date',)\nclass LocationInlineForm(forms.ModelForm):\n    geolocation = PointField(widget=LocationWidget)\n    class Meta:\n        model = Location",
        "detail": "clinics.admin",
        "documentation": {}
    },
    {
        "label": "LocationInlineForm",
        "kind": 6,
        "importPath": "clinics.admin",
        "description": "clinics.admin",
        "peekOfCode": "class LocationInlineForm(forms.ModelForm):\n    geolocation = PointField(widget=LocationWidget)\n    class Meta:\n        model = Location\n        fields = '__all__'\nclass LocationInline(admin.StackedInline):\n    model = Location\n    form = LocationInlineForm\n    extra = 1\n    def get_queryset(self, request):",
        "detail": "clinics.admin",
        "documentation": {}
    },
    {
        "label": "LocationInline",
        "kind": 6,
        "importPath": "clinics.admin",
        "description": "clinics.admin",
        "peekOfCode": "class LocationInline(admin.StackedInline):\n    model = Location\n    form = LocationInlineForm\n    extra = 1\n    def get_queryset(self, request):\n        qs = super().get_queryset(request)\n        user_location = self.get_user_location(request)\n        if user_location:\n            qs = qs.annotate(distance=Distance('location', user_location)).order_by('distance')\n        return qs",
        "detail": "clinics.admin",
        "documentation": {}
    },
    {
        "label": "ClinicAvailabilityForm",
        "kind": 6,
        "importPath": "clinics.admin",
        "description": "clinics.admin",
        "peekOfCode": "class ClinicAvailabilityForm(forms.ModelForm):\n    max_slots = forms.IntegerField(validators=[MinValueValidator(0)])\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        # Get the clinic instance associated with this ClinicAvailability instance\n        clinic_instance = self.instance.clinic\n        # Set the maximum value for the max_slots field based on the clinic's configuration\n        self.fields['max_slots'].validators.append(MaxValueValidator(clinic_instance.max_appointment_slots_per_day))\n    class Meta:\n        model = ClinicAvailability",
        "detail": "clinics.admin",
        "documentation": {}
    },
    {
        "label": "ClinicAvailabilityInline",
        "kind": 6,
        "importPath": "clinics.admin",
        "description": "clinics.admin",
        "peekOfCode": "class ClinicAvailabilityInline(admin.TabularInline):\n    model = ClinicAvailability\n    extra = 0\nclass BasicInfoInline(admin.TabularInline):\n    model = BasicInfo\n    extra = 0\nclass ManagementInline(admin.TabularInline):\n    model = Management\n    extra = 0\nclass SpecialtyInline(admin.TabularInline):",
        "detail": "clinics.admin",
        "documentation": {}
    },
    {
        "label": "BasicInfoInline",
        "kind": 6,
        "importPath": "clinics.admin",
        "description": "clinics.admin",
        "peekOfCode": "class BasicInfoInline(admin.TabularInline):\n    model = BasicInfo\n    extra = 0\nclass ManagementInline(admin.TabularInline):\n    model = Management\n    extra = 0\nclass SpecialtyInline(admin.TabularInline):\n    model = Specialty\n    extra = 0\nclass SalaryInline(admin.TabularInline):",
        "detail": "clinics.admin",
        "documentation": {}
    },
    {
        "label": "ManagementInline",
        "kind": 6,
        "importPath": "clinics.admin",
        "description": "clinics.admin",
        "peekOfCode": "class ManagementInline(admin.TabularInline):\n    model = Management\n    extra = 0\nclass SpecialtyInline(admin.TabularInline):\n    model = Specialty\n    extra = 0\nclass SalaryInline(admin.TabularInline):\n    model = Salary\n    extra = 0\nclass ContractInline(admin.TabularInline):",
        "detail": "clinics.admin",
        "documentation": {}
    },
    {
        "label": "SpecialtyInline",
        "kind": 6,
        "importPath": "clinics.admin",
        "description": "clinics.admin",
        "peekOfCode": "class SpecialtyInline(admin.TabularInline):\n    model = Specialty\n    extra = 0\nclass SalaryInline(admin.TabularInline):\n    model = Salary\n    extra = 0\nclass ContractInline(admin.TabularInline):\n    model = Contract\n    extra = 0\nclass LeaveInline(admin.TabularInline):",
        "detail": "clinics.admin",
        "documentation": {}
    },
    {
        "label": "SalaryInline",
        "kind": 6,
        "importPath": "clinics.admin",
        "description": "clinics.admin",
        "peekOfCode": "class SalaryInline(admin.TabularInline):\n    model = Salary\n    extra = 0\nclass ContractInline(admin.TabularInline):\n    model = Contract\n    extra = 0\nclass LeaveInline(admin.TabularInline):\n    model = Leave\n    extra = 0\n# Register each model with its corresponding admin class",
        "detail": "clinics.admin",
        "documentation": {}
    },
    {
        "label": "ContractInline",
        "kind": 6,
        "importPath": "clinics.admin",
        "description": "clinics.admin",
        "peekOfCode": "class ContractInline(admin.TabularInline):\n    model = Contract\n    extra = 0\nclass LeaveInline(admin.TabularInline):\n    model = Leave\n    extra = 0\n# Register each model with its corresponding admin class\n@admin.register(Clinic)\nclass ClinicAdmin(admin.ModelAdmin):\n    form = ClinicAdminForm",
        "detail": "clinics.admin",
        "documentation": {}
    },
    {
        "label": "LeaveInline",
        "kind": 6,
        "importPath": "clinics.admin",
        "description": "clinics.admin",
        "peekOfCode": "class LeaveInline(admin.TabularInline):\n    model = Leave\n    extra = 0\n# Register each model with its corresponding admin class\n@admin.register(Clinic)\nclass ClinicAdmin(admin.ModelAdmin):\n    form = ClinicAdminForm\n    list_display = ('name','country', 'is_active')\n    list_filter = ('is_active',)\n    search_fields = ('name', 'country','is_active')",
        "detail": "clinics.admin",
        "documentation": {}
    },
    {
        "label": "ClinicAdmin",
        "kind": 6,
        "importPath": "clinics.admin",
        "description": "clinics.admin",
        "peekOfCode": "class ClinicAdmin(admin.ModelAdmin):\n    form = ClinicAdminForm\n    list_display = ('name','country', 'is_active')\n    list_filter = ('is_active',)\n    search_fields = ('name', 'country','is_active')\n    autocomplete_fields = ()\n    inlines = [\n        BasicInfoInline,\n        LocationInline,\n        ManagementInline,",
        "detail": "clinics.admin",
        "documentation": {}
    },
    {
        "label": "AgreementAdmin",
        "kind": 6,
        "importPath": "clinics.admin",
        "description": "clinics.admin",
        "peekOfCode": "class AgreementAdmin(admin.ModelAdmin):\n    pass\n@admin.register(Specialty)\nclass SpecialtyAdmin(admin.ModelAdmin):\n    inlines = [\n        ContractInline,\n    ]\n@admin.register(Salary)\nclass SalaryAdmin(admin.ModelAdmin):\n    inlines = [",
        "detail": "clinics.admin",
        "documentation": {}
    },
    {
        "label": "SpecialtyAdmin",
        "kind": 6,
        "importPath": "clinics.admin",
        "description": "clinics.admin",
        "peekOfCode": "class SpecialtyAdmin(admin.ModelAdmin):\n    inlines = [\n        ContractInline,\n    ]\n@admin.register(Salary)\nclass SalaryAdmin(admin.ModelAdmin):\n    inlines = [\n        ContractInline,\n    ]\n@admin.register(Leave)",
        "detail": "clinics.admin",
        "documentation": {}
    },
    {
        "label": "SalaryAdmin",
        "kind": 6,
        "importPath": "clinics.admin",
        "description": "clinics.admin",
        "peekOfCode": "class SalaryAdmin(admin.ModelAdmin):\n    inlines = [\n        ContractInline,\n    ]\n@admin.register(Leave)\nclass LeaveAdmin(admin.ModelAdmin):\n    list_display = ('staff', 'start_date', 'end_date', 'type', 'status','is_approved')\n    list_filter = ('type', 'status')\n    search_fields = ('staff__user__first_name', 'staff__user__last_name')\n@admin.register(Contract)",
        "detail": "clinics.admin",
        "documentation": {}
    },
    {
        "label": "LeaveAdmin",
        "kind": 6,
        "importPath": "clinics.admin",
        "description": "clinics.admin",
        "peekOfCode": "class LeaveAdmin(admin.ModelAdmin):\n    list_display = ('staff', 'start_date', 'end_date', 'type', 'status','is_approved')\n    list_filter = ('type', 'status')\n    search_fields = ('staff__user__first_name', 'staff__user__last_name')\n@admin.register(Contract)\nclass ContractAdmin(admin.ModelAdmin):\n    list_display = ('id', 'specialty', 'start_date', 'end_date', 'agreement', 'salary','is_active')\n    list_filter = ('specialty', 'agreement', 'salary')\n    search_fields = ('specialty__name', 'agreement__name', 'salary__name')\n    def get_readonly_fields(self, request, obj=None):",
        "detail": "clinics.admin",
        "documentation": {}
    },
    {
        "label": "ContractAdmin",
        "kind": 6,
        "importPath": "clinics.admin",
        "description": "clinics.admin",
        "peekOfCode": "class ContractAdmin(admin.ModelAdmin):\n    list_display = ('id', 'specialty', 'start_date', 'end_date', 'agreement', 'salary','is_active')\n    list_filter = ('specialty', 'agreement', 'salary')\n    search_fields = ('specialty__name', 'agreement__name', 'salary__name')\n    def get_readonly_fields(self, request, obj=None):\n        # make 'status' field read-only for existing objects\n        if obj:\n            return ('status', )\n        return ()\n    def save_model(self, request, obj, form, change):",
        "detail": "clinics.admin",
        "documentation": {}
    },
    {
        "label": "StaffAdmin",
        "kind": 6,
        "importPath": "clinics.admin",
        "description": "clinics.admin",
        "peekOfCode": "class StaffAdmin(admin.ModelAdmin):\n    list_display = ('__str__', 'status', 'is_approved','created_by', 'approved_by')\n    fields = ('user', 'status','is_approved')\n    autocomplete_fields = ('user', 'created_by', 'approved_by')\n    search_fields = ('user__first_name', 'user__last_name')\n    readonly_fields = ('clinic','created_by', 'approved_by')   \nadmin.site.register(Staff, StaffAdmin)\n@admin.register(ClinicStaff)\nclass ClinicStaffAdmin(admin.ModelAdmin):\n    list_display = ('staff', 'clinic', 'created_by', 'approved_by')",
        "detail": "clinics.admin",
        "documentation": {}
    },
    {
        "label": "ClinicStaffAdmin",
        "kind": 6,
        "importPath": "clinics.admin",
        "description": "clinics.admin",
        "peekOfCode": "class ClinicStaffAdmin(admin.ModelAdmin):\n    list_display = ('staff', 'clinic', 'created_by', 'approved_by')\n    autocomplete_fields = ('staff', 'clinic', 'created_by', 'approved_by')\n    search_fields = ('staff', 'clinic', 'created_by', 'approved_by')\n@admin.register(Patient)\nclass PatientAdmin(admin.ModelAdmin):\n    list_display = ('id', 'user', 'age', 'gender', 'address')\n    list_filter = ('gender', )\n    search_fields = ('user__username', 'user__first_name', 'user__last_name', 'user__email', 'address')\n@admin.register(Charge)",
        "detail": "clinics.admin",
        "documentation": {}
    },
    {
        "label": "PatientAdmin",
        "kind": 6,
        "importPath": "clinics.admin",
        "description": "clinics.admin",
        "peekOfCode": "class PatientAdmin(admin.ModelAdmin):\n    list_display = ('id', 'user', 'age', 'gender', 'address')\n    list_filter = ('gender', )\n    search_fields = ('user__username', 'user__first_name', 'user__last_name', 'user__email', 'address')\n@admin.register(Charge)\nclass ChargeAdmin(admin.ModelAdmin):\n    list_display = ('id', 'appointment_type', 'amount')\n    list_filter = ('appointment_type', )\n    autocomplete_fields = ('appointment_type',)\n    search_fields = ('appointment_type__name', )",
        "detail": "clinics.admin",
        "documentation": {}
    },
    {
        "label": "ChargeAdmin",
        "kind": 6,
        "importPath": "clinics.admin",
        "description": "clinics.admin",
        "peekOfCode": "class ChargeAdmin(admin.ModelAdmin):\n    list_display = ('id', 'appointment_type', 'amount')\n    list_filter = ('appointment_type', )\n    autocomplete_fields = ('appointment_type',)\n    search_fields = ('appointment_type__name', )\n@admin.register(AppointmentType)\nclass AppointmentTypeAdmin(admin.ModelAdmin):\n    list_display = ('name', 'description')\n    search_fields = ('name', 'description')\n@admin.register(Appointment)",
        "detail": "clinics.admin",
        "documentation": {}
    },
    {
        "label": "AppointmentTypeAdmin",
        "kind": 6,
        "importPath": "clinics.admin",
        "description": "clinics.admin",
        "peekOfCode": "class AppointmentTypeAdmin(admin.ModelAdmin):\n    list_display = ('name', 'description')\n    search_fields = ('name', 'description')\n@admin.register(Appointment)\nclass AppointmentAdmin(admin.ModelAdmin):\n    list_display = ('id', 'staff', 'patient', 'appointment_type', 'appointment_date', 'start_time', 'end_time', 'status', 'rating')\n    autocomplete_fields = ['staff', 'patient', 'appointment_type']\n    list_filter = ('status', 'appointment_type')\n    search_fields = ('staff__user__username', 'staff__user__first_name', 'staff__user__last_name', 'patient__user__username', 'patient__user__first_name', 'patient__user__last_name', 'appointment_type__name')\n    readonly_fields = ('weight', 'rating','get_charge', 'get_staff_name', 'get_patient_name')",
        "detail": "clinics.admin",
        "documentation": {}
    },
    {
        "label": "AppointmentAdmin",
        "kind": 6,
        "importPath": "clinics.admin",
        "description": "clinics.admin",
        "peekOfCode": "class AppointmentAdmin(admin.ModelAdmin):\n    list_display = ('id', 'staff', 'patient', 'appointment_type', 'appointment_date', 'start_time', 'end_time', 'status', 'rating')\n    autocomplete_fields = ['staff', 'patient', 'appointment_type']\n    list_filter = ('status', 'appointment_type')\n    search_fields = ('staff__user__username', 'staff__user__first_name', 'staff__user__last_name', 'patient__user__username', 'patient__user__first_name', 'patient__user__last_name', 'appointment_type__name')\n    readonly_fields = ('weight', 'rating','get_charge', 'get_staff_name', 'get_patient_name')\n    ordering = ('-appointment_date', '-start_time')\n    date_hierarchy = 'appointment_date'\n    raw_id_fields = ('staff','patient','appointment_type')\n    def get_queryset(self, request):",
        "detail": "clinics.admin",
        "documentation": {}
    },
    {
        "label": "ClinicsConfig",
        "kind": 6,
        "importPath": "clinics.apps",
        "description": "clinics.apps",
        "peekOfCode": "class ClinicsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'clinics'",
        "detail": "clinics.apps",
        "documentation": {}
    },
    {
        "label": "Gender",
        "kind": 6,
        "importPath": "clinics.enums",
        "description": "clinics.enums",
        "peekOfCode": "class Gender(Enum):\n    MALE = 'male', 'Male'\n    FEMALE = 'female', 'Female'\n    OTHER = 'other', 'Other'\nclass StaffStatus(Enum):\n    ACTIVE = 'Active'\n    INACTIVE = 'Inactive'\n    TERMINATED = 'Terminated'\nclass Specialty(Enum):\n    CARDIOLOGIST = 'cardiologist', 'Cardiologist'",
        "detail": "clinics.enums",
        "documentation": {}
    },
    {
        "label": "StaffStatus",
        "kind": 6,
        "importPath": "clinics.enums",
        "description": "clinics.enums",
        "peekOfCode": "class StaffStatus(Enum):\n    ACTIVE = 'Active'\n    INACTIVE = 'Inactive'\n    TERMINATED = 'Terminated'\nclass Specialty(Enum):\n    CARDIOLOGIST = 'cardiologist', 'Cardiologist'\n    DERMATOLOGIST = 'dermatologist', 'Dermatologist'\n    ENDOCRINOLOGIST = 'endocrinologist', 'Endocrinologist'\n    GYNECOLOGIST = 'gynecologist', 'Gynecologist'\n    NEUROLOGIST = 'neurologist', 'Neurologist'",
        "detail": "clinics.enums",
        "documentation": {}
    },
    {
        "label": "Specialty",
        "kind": 6,
        "importPath": "clinics.enums",
        "description": "clinics.enums",
        "peekOfCode": "class Specialty(Enum):\n    CARDIOLOGIST = 'cardiologist', 'Cardiologist'\n    DERMATOLOGIST = 'dermatologist', 'Dermatologist'\n    ENDOCRINOLOGIST = 'endocrinologist', 'Endocrinologist'\n    GYNECOLOGIST = 'gynecologist', 'Gynecologist'\n    NEUROLOGIST = 'neurologist', 'Neurologist'\n    PSYCHIATRIST = 'psychiatrist', 'Psychiatrist'\n    SURGEON = 'surgeon', 'Surgeon'\n    UROLOGIST = 'urologist', 'Urologist'\nclass AppointmentStatus(Enum):",
        "detail": "clinics.enums",
        "documentation": {}
    },
    {
        "label": "AppointmentStatus",
        "kind": 6,
        "importPath": "clinics.enums",
        "description": "clinics.enums",
        "peekOfCode": "class AppointmentStatus(Enum):\n    CONFIRMED = \"confirmed\"\n    CANCELED = \"canceled\"\n    COMPLETED = \"completed\"\n    RESCHEDULED = \"rescheduled\"\nclass ContractStatus(Enum):\n    ACTIVE = 'Active'\n    PENDING = 'Pending'\n    EXPIRED = 'Expired'\n    TERMINATED = 'Terminated'",
        "detail": "clinics.enums",
        "documentation": {}
    },
    {
        "label": "ContractStatus",
        "kind": 6,
        "importPath": "clinics.enums",
        "description": "clinics.enums",
        "peekOfCode": "class ContractStatus(Enum):\n    ACTIVE = 'Active'\n    PENDING = 'Pending'\n    EXPIRED = 'Expired'\n    TERMINATED = 'Terminated'\nclass Status(Enum):\n    \"\"\"\n    Enum representing the status of staff.\n    \"\"\"\n    REQUESTED = 'Requested'",
        "detail": "clinics.enums",
        "documentation": {}
    },
    {
        "label": "Status",
        "kind": 6,
        "importPath": "clinics.enums",
        "description": "clinics.enums",
        "peekOfCode": "class Status(Enum):\n    \"\"\"\n    Enum representing the status of staff.\n    \"\"\"\n    REQUESTED = 'Requested'\n    APPROVED = 'Approved'\n    REJECTED = 'Rejected'\nclass LeaveType(Enum):\n    SICK_LEAVE = 'Sick leave'\n    MATERNITY_LEAVE = 'Maternity leave'",
        "detail": "clinics.enums",
        "documentation": {}
    },
    {
        "label": "LeaveType",
        "kind": 6,
        "importPath": "clinics.enums",
        "description": "clinics.enums",
        "peekOfCode": "class LeaveType(Enum):\n    SICK_LEAVE = 'Sick leave'\n    MATERNITY_LEAVE = 'Maternity leave'\n    PATERNITY_LEAVE = 'Paternity leave'\n    ANNUAL_LEAVE = 'Annual leave'\n    COMPASSIONATE_LEAVE = 'Compassionate leave'\n    STUDY_LEAVE = 'Study leave'\n    JURY_DUTY_LEAVE = 'Jury duty leave'\n    PUBLIC_HOLIDAY_LEAVE = 'Public holiday leave'\n    UNPAID_LEAVE = 'Unpaid leave'",
        "detail": "clinics.enums",
        "documentation": {}
    },
    {
        "label": "ClinicForm",
        "kind": 6,
        "importPath": "clinics.forms",
        "description": "clinics.forms",
        "peekOfCode": "class ClinicForm(forms.ModelForm):\n    class Meta:\n        model = Clinic\n        fields = ['name', 'is_active']\nclass BasicInfoForm(forms.ModelForm):\n    class Meta:\n        model = BasicInfo\n        exclude = ['clinic']\nclass LocationForm(forms.ModelForm):\n    class Meta:",
        "detail": "clinics.forms",
        "documentation": {}
    },
    {
        "label": "BasicInfoForm",
        "kind": 6,
        "importPath": "clinics.forms",
        "description": "clinics.forms",
        "peekOfCode": "class BasicInfoForm(forms.ModelForm):\n    class Meta:\n        model = BasicInfo\n        exclude = ['clinic']\nclass LocationForm(forms.ModelForm):\n    class Meta:\n        model = Location\n        exclude = ['clinic']\nclass ManagementForm(forms.ModelForm):\n    class Meta:",
        "detail": "clinics.forms",
        "documentation": {}
    },
    {
        "label": "LocationForm",
        "kind": 6,
        "importPath": "clinics.forms",
        "description": "clinics.forms",
        "peekOfCode": "class LocationForm(forms.ModelForm):\n    class Meta:\n        model = Location\n        exclude = ['clinic']\nclass ManagementForm(forms.ModelForm):\n    class Meta:\n        model = Management\n        exclude = ['clinic']\nclass ClinicAvailabilityForm(forms.ModelForm):\n    class Meta:",
        "detail": "clinics.forms",
        "documentation": {}
    },
    {
        "label": "ManagementForm",
        "kind": 6,
        "importPath": "clinics.forms",
        "description": "clinics.forms",
        "peekOfCode": "class ManagementForm(forms.ModelForm):\n    class Meta:\n        model = Management\n        exclude = ['clinic']\nclass ClinicAvailabilityForm(forms.ModelForm):\n    class Meta:\n        model = ClinicAvailability\n        exclude = ['clinic']",
        "detail": "clinics.forms",
        "documentation": {}
    },
    {
        "label": "ClinicAvailabilityForm",
        "kind": 6,
        "importPath": "clinics.forms",
        "description": "clinics.forms",
        "peekOfCode": "class ClinicAvailabilityForm(forms.ModelForm):\n    class Meta:\n        model = ClinicAvailability\n        exclude = ['clinic']",
        "detail": "clinics.forms",
        "documentation": {}
    },
    {
        "label": "BasicInfo",
        "kind": 6,
        "importPath": "clinics.models",
        "description": "clinics.models",
        "peekOfCode": "class BasicInfo(models.Model):\n    \"\"\"\n    Model for storing basic information about a clinic.\n    \"\"\"\n    clinic: 'Clinic' = models.OneToOneField('Clinic', on_delete=models.CASCADE, primary_key=True)\n    name: str = models.CharField(max_length=255)\n    address: str = models.CharField(max_length=255)\n    city: str = models.CharField(max_length=255)\n    state: str = models.CharField(max_length=2)\n    zip_code: str = models.CharField(max_length=10)",
        "detail": "clinics.models",
        "documentation": {}
    },
    {
        "label": "Location",
        "kind": 6,
        "importPath": "clinics.models",
        "description": "clinics.models",
        "peekOfCode": "class Location(models.Model):\n    \"\"\"\n    Model for storing the location of a clinic.\n    \"\"\"\n    clinic:'Clinic' = models.OneToOneField('Clinic', on_delete=models.CASCADE, primary_key=True)\n    address = models.CharField(max_length=255, help_text=\"Address of the clinic.\")\n    geolocation = map_fields.GeoLocationField(max_length=100, help_text=\"Click on the map to select the location of the clinic.\")\n    def __str__(self):\n        return self.clinic.name\nclass Management(models.Model):",
        "detail": "clinics.models",
        "documentation": {}
    },
    {
        "label": "Management",
        "kind": 6,
        "importPath": "clinics.models",
        "description": "clinics.models",
        "peekOfCode": "class Management(models.Model):\n    \"\"\"\n    Management model\n    \"\"\"\n    clinic: 'Clinic' = models.OneToOneField('Clinic', on_delete=models.CASCADE, primary_key=True)\n    medical_director: str = models.CharField(max_length=255)\n    clinic_manager: str = models.CharField(max_length=255)\n    hours_of_operation: str = models.CharField(max_length=255, blank=True)\n    def __str__(self) -> str:\n        return self.clinic.name",
        "detail": "clinics.models",
        "documentation": {}
    },
    {
        "label": "Holiday",
        "kind": 6,
        "importPath": "clinics.models",
        "description": "clinics.models",
        "peekOfCode": "class Holiday(models.Model):\n    clinic = models.ForeignKey('Clinic', on_delete=models.CASCADE)\n    date = models.DateField()\n    country = CountryField()\n    class Meta:\n        unique_together = (('clinic', 'date', 'country'),)\n    def __str__(self):\n        return f\"{self.date} ({self.clinic.name}, {self.country.name})\"\nclass ClinicAvailability(models.Model):\n    clinic: 'Clinic' = models.ForeignKey('Clinic', on_delete=models.CASCADE,related_name='clinic_availability')",
        "detail": "clinics.models",
        "documentation": {}
    },
    {
        "label": "ClinicAvailability",
        "kind": 6,
        "importPath": "clinics.models",
        "description": "clinics.models",
        "peekOfCode": "class ClinicAvailability(models.Model):\n    clinic: 'Clinic' = models.ForeignKey('Clinic', on_delete=models.CASCADE,related_name='clinic_availability')\n    appointment_type: 'AppointmentType' = models.ForeignKey('AppointmentType', related_name='caa', on_delete=models.CASCADE)\n    date: models.DateField = models.DateField()\n    available_slots: int = models.IntegerField(validators=[MinValueValidator(0)])\n    max_slots: int = models.IntegerField(validators=[MinValueValidator(0)])\n    def __str__(self) -> str:\n        return f\"{self.appointment_type} availability for {self.clinic} on {self.date}\"\n    class Meta:\n        unique_together = ('clinic', 'appointment_type', 'date')",
        "detail": "clinics.models",
        "documentation": {}
    },
    {
        "label": "Clinic",
        "kind": 6,
        "importPath": "clinics.models",
        "description": "clinics.models",
        "peekOfCode": "class Clinic(Searchable):\n    name: str = models.CharField(max_length=255)\n    country = CountryField()\n    is_active: bool = models.BooleanField(default=True)\n    created_at:datetime = models.DateTimeField(default=timezone.now)\n    updated_at:datetime  = models.DateTimeField(auto_now=True)\n    created_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='staff_created', null=True,blank=True)\n    approved_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='staff_approved', null=True,blank=True)\n    #search_fields = ['name']\n    fields_to_return = ['name']",
        "detail": "clinics.models",
        "documentation": {}
    },
    {
        "label": "Agreement",
        "kind": 6,
        "importPath": "clinics.models",
        "description": "clinics.models",
        "peekOfCode": "class Agreement(models.Model):\n    \"\"\"\n    Model representing staff agreements.\n    \"\"\"\n    name = models.CharField(max_length=255)\n    description = models.TextField()\n    def __str__(self):\n        return self.name\nclass AppointmentType(models.Model):\n    \"\"\"",
        "detail": "clinics.models",
        "documentation": {}
    },
    {
        "label": "AppointmentType",
        "kind": 6,
        "importPath": "clinics.models",
        "description": "clinics.models",
        "peekOfCode": "class AppointmentType(models.Model):\n    \"\"\"\n    Model representing appointment types for staff.\n    \"\"\"\n    name = models.CharField(max_length=255)\n    description = models.TextField()\n    max_slots: int = models.IntegerField(default=100, validators=[MinValueValidator(0)])\n    def __str__(self):\n        return self.name\n    def get_charge(self):",
        "detail": "clinics.models",
        "documentation": {}
    },
    {
        "label": "Specialty",
        "kind": 6,
        "importPath": "clinics.models",
        "description": "clinics.models",
        "peekOfCode": "class Specialty(models.Model):\n    \"\"\"\n    Model representing staff specialties.\n    \"\"\"\n    name = models.CharField(max_length=255)\n    description = models.TextField()\n    appointment_type = models.ForeignKey(AppointmentType, on_delete=models.CASCADE, related_name='appointment_specialty')\n    def __str__(self):\n        return self.name\n    def has_charge(self):",
        "detail": "clinics.models",
        "documentation": {}
    },
    {
        "label": "Salary",
        "kind": 6,
        "importPath": "clinics.models",
        "description": "clinics.models",
        "peekOfCode": "class Salary(models.Model):\n    \"\"\"\n    Model representing staff salaries.\n    \"\"\"\n    amount = models.DecimalField(decimal_places=2, max_digits=12)\n    description = models.TextField()\n    frequency_choices = [\n        ('hourly', 'Hourly'),\n        ('weekly', 'Weekly'),\n        ('monthly', 'Monthly'),",
        "detail": "clinics.models",
        "documentation": {}
    },
    {
        "label": "Contract",
        "kind": 6,
        "importPath": "clinics.models",
        "description": "clinics.models",
        "peekOfCode": "class Contract(models.Model):\n    \"\"\"\n    Model representing staff contracts.\n    \"\"\"\n    start_date = models.DateTimeField()\n    end_date = models.DateTimeField()\n    agreement = models.ForeignKey(Agreement, on_delete=models.CASCADE, related_name='contracts')\n    specialty = models.ForeignKey(Specialty, on_delete=models.CASCADE, related_name='contracts')\n    salary = models.ForeignKey(Salary, on_delete=models.CASCADE, related_name='contracts')\n    status = models.CharField(max_length=20, choices=[(status.name, status.value) for status in ContractStatus],default=ContractStatus.PENDING.value)",
        "detail": "clinics.models",
        "documentation": {}
    },
    {
        "label": "Charge",
        "kind": 6,
        "importPath": "clinics.models",
        "description": "clinics.models",
        "peekOfCode": "class Charge(models.Model):\n    appointment_type = models.ForeignKey(AppointmentType, on_delete=models.CASCADE,related_name='appointment_type_charge')\n    amount: Decimal = models.DecimalField(max_digits=10,decimal_places=2,default=Decimal('0.00'))\n    def __str__(self):\n        return self.appointment_type.name  \nclass Leave(models.Model):\n    type = models.CharField(max_length=20, choices=[(tag.value, tag.value) for tag in LeaveType], default=LeaveType.PERSONAL_LEAVE.value)\n    start_date = models.DateField()\n    end_date = models.DateField()\n    total_days = models.PositiveIntegerField(default=30)",
        "detail": "clinics.models",
        "documentation": {}
    },
    {
        "label": "Leave",
        "kind": 6,
        "importPath": "clinics.models",
        "description": "clinics.models",
        "peekOfCode": "class Leave(models.Model):\n    type = models.CharField(max_length=20, choices=[(tag.value, tag.value) for tag in LeaveType], default=LeaveType.PERSONAL_LEAVE.value)\n    start_date = models.DateField()\n    end_date = models.DateField()\n    total_days = models.PositiveIntegerField(default=30)\n    remaining_days = models.PositiveIntegerField(default=30)\n    staff = models.ForeignKey('Staff', on_delete=models.CASCADE, related_name='clinic_staff_leave')\n    status = models.CharField(max_length=20, choices=[(tag.value, tag.value) for tag in Status], default=Status.REQUESTED.value)\n    is_approved = models.BooleanField(default=False)\n    approved_by = models.ForeignKey('self', on_delete=models.CASCADE, related_name='staff_approved', null=True,blank=True)",
        "detail": "clinics.models",
        "documentation": {}
    },
    {
        "label": "Staff",
        "kind": 6,
        "importPath": "clinics.models",
        "description": "clinics.models",
        "peekOfCode": "class Staff(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='staff')\n    clinic = models.ManyToManyField('Clinic', through='ClinicStaff')\n    status = models.CharField(max_length=20, choices=[(status.name, status.value) for status in ContractStatus],default=ContractStatus.PENDING.value)\n    is_approved = models.BooleanField(default=False)\n    created_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='user_created', null=True)\n    approved_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='user_approved', null=True,blank=True)\n    class Meta:\n        unique_together = ('created_by', 'approved_by')\n    def __str__(self):",
        "detail": "clinics.models",
        "documentation": {}
    },
    {
        "label": "ClinicStaffManager",
        "kind": 6,
        "importPath": "clinics.models",
        "description": "clinics.models",
        "peekOfCode": "class ClinicStaffManager(models.Manager):\n    def select_staff(self, clinic: Clinic, appointment_type: AppointmentType,check_date=date.today()) -> QuerySet:\n        \"\"\"\n        Select staff based on appointment type, active contract status, and leave status.\n        Args:\n            clinic: Clinic object to filter staff by.\n            appointment_type: AppointmentType object to filter staff by.\n            check_date: Date object to filter staff by.\n        Returns:\n            QuerySet of Staff objects.",
        "detail": "clinics.models",
        "documentation": {}
    },
    {
        "label": "ClinicStaff",
        "kind": 6,
        "importPath": "clinics.models",
        "description": "clinics.models",
        "peekOfCode": "class ClinicStaff(models.Model):\n    \"\"\"\n    Model representing the relationship between a clinic and its staff.\n    \"\"\"\n    clinic = models.ForeignKey(Clinic, on_delete=models.CASCADE, related_name='staff_clinic')\n    staff = models.ForeignKey(Staff, on_delete=models.CASCADE, related_name='clinic_staff')\n    permission_group = models.ForeignKey(Group, on_delete=models.SET_NULL, null=True, blank=True, related_name='clinic_staff')\n    contract = models.ForeignKey(Contract, on_delete=models.SET_NULL, null=True, blank=True, related_name='clinic_staff')\n    created_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='staff_clinic_created', null=True)\n    approved_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='staff_clinic_approved', null=True,blank=True)",
        "detail": "clinics.models",
        "documentation": {}
    },
    {
        "label": "Patient",
        "kind": 6,
        "importPath": "clinics.models",
        "description": "clinics.models",
        "peekOfCode": "class Patient(models.Model):\n    \"\"\"\n    Patient model\n    \"\"\"\n    user:User = models.OneToOneField(User, on_delete=models.CASCADE, related_name='patient')\n    age:int = models.IntegerField(validators=[MinValueValidator(0)])\n    gender:str = models.CharField(max_length=10, choices=[(tag.name, tag.value[1]) for tag in Gender])\n    address:str = models.CharField(max_length=255)\n    def __str__(self):\n        return self.user.first_name + ' ' + self.user.last_name + ' ' + self.user.email",
        "detail": "clinics.models",
        "documentation": {}
    },
    {
        "label": "Appointment",
        "kind": 6,
        "importPath": "clinics.models",
        "description": "clinics.models",
        "peekOfCode": "class Appointment(Searchable):\n    \"\"\"\n    Appointment model\n    \"\"\"\n    clinic:Clinic = models.ForeignKey(\n        Clinic, on_delete=models.CASCADE, related_name='clinic_appointments', related_query_name='clinic_appointments',blank=True,null=True)\n    staff:Staff = models.ForeignKey(\n        Staff, on_delete=models.CASCADE, related_name='staff_appointments', related_query_name='appointment',blank=True)\n    patient: Union[Patient, User] = models.ForeignKey(\n        User, on_delete=models.CASCADE, related_name='patient_appointments', related_query_name='patient_appointment')",
        "detail": "clinics.models",
        "documentation": {}
    },
    {
        "label": "ClinicAvailabilitySerializer",
        "kind": 6,
        "importPath": "clinics.serializers",
        "description": "clinics.serializers",
        "peekOfCode": "class ClinicAvailabilitySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ClinicAvailability\n        fields = ('id', 'appointment_type', 'date', 'available_slots')\nclass ManagementSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Management\n        fields = ('id', 'medical_director', 'clinic_manager', 'hours_of_operation')\nclass LocationSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "clinics.serializers",
        "documentation": {}
    },
    {
        "label": "ManagementSerializer",
        "kind": 6,
        "importPath": "clinics.serializers",
        "description": "clinics.serializers",
        "peekOfCode": "class ManagementSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Management\n        fields = ('id', 'medical_director', 'clinic_manager', 'hours_of_operation')\nclass LocationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Location\n        fields = ('id', 'address', 'geolocation')\nclass BasicInfoSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "clinics.serializers",
        "documentation": {}
    },
    {
        "label": "LocationSerializer",
        "kind": 6,
        "importPath": "clinics.serializers",
        "description": "clinics.serializers",
        "peekOfCode": "class LocationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Location\n        fields = ('id', 'address', 'geolocation')\nclass BasicInfoSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = BasicInfo\n        fields = ('id', 'name', 'address', 'city', 'state', 'zip_code', 'phone_number', 'email', 'website')\nclass ClinicSerializer(BaseSerializer):\n    class Meta:",
        "detail": "clinics.serializers",
        "documentation": {}
    },
    {
        "label": "BasicInfoSerializer",
        "kind": 6,
        "importPath": "clinics.serializers",
        "description": "clinics.serializers",
        "peekOfCode": "class BasicInfoSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = BasicInfo\n        fields = ('id', 'name', 'address', 'city', 'state', 'zip_code', 'phone_number', 'email', 'website')\nclass ClinicSerializer(BaseSerializer):\n    class Meta:\n        model = Clinic\n        fields = ('id', 'name', 'is_active','created_at')\nfrom rest_framework import serializers\nfrom django.utils import timezone",
        "detail": "clinics.serializers",
        "documentation": {}
    },
    {
        "label": "ClinicSerializer",
        "kind": 6,
        "importPath": "clinics.serializers",
        "description": "clinics.serializers",
        "peekOfCode": "class ClinicSerializer(BaseSerializer):\n    class Meta:\n        model = Clinic\n        fields = ('id', 'name', 'is_active','created_at')\nfrom rest_framework import serializers\nfrom django.utils import timezone\nfrom .models import Appointment\n'''\nclass AppointmentSerializer(serializers.ModelSerializer):\n    appointment_date = serializers.DateField(input_formats=['%Y-%m-%d'], required=True)",
        "detail": "clinics.serializers",
        "documentation": {}
    },
    {
        "label": "AppointmentSerializer",
        "kind": 6,
        "importPath": "clinics.serializers",
        "description": "clinics.serializers",
        "peekOfCode": "class AppointmentSerializer(serializers.ModelSerializer):\n    appointment_date = serializers.DateField(input_formats=['%Y-%m-%d'], required=True)\n    class Meta:\n        model = Appointment\n        fields = ['appointment_date']\n    def validate_appointment_date(self, value):\n        if value < timezone.localdate():\n            raise serializers.ValidationError('The appointment date must be in the future.')\n        return value\n    def __init__(self, *args, **kwargs):",
        "detail": "clinics.serializers",
        "documentation": {}
    },
    {
        "label": "ChargeSerializer",
        "kind": 6,
        "importPath": "clinics.serializers",
        "description": "clinics.serializers",
        "peekOfCode": "class ChargeSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Charge\n        fields = ('amount',)\nclass AppointmentSerializer(BaseSerializer):\n    class Meta:\n        model = Appointment\n        fields = ['id','appointment_date','start_time', 'end_time','status','clinic','patient','staff','appointment_type']\nclass AppointmentTypeSerializer(BaseSerializer):\n    charge = serializers.SerializerMethodField()",
        "detail": "clinics.serializers",
        "documentation": {}
    },
    {
        "label": "AppointmentSerializer",
        "kind": 6,
        "importPath": "clinics.serializers",
        "description": "clinics.serializers",
        "peekOfCode": "class AppointmentSerializer(BaseSerializer):\n    class Meta:\n        model = Appointment\n        fields = ['id','appointment_date','start_time', 'end_time','status','clinic','patient','staff','appointment_type']\nclass AppointmentTypeSerializer(BaseSerializer):\n    charge = serializers.SerializerMethodField()\n    class Meta:\n        model = AppointmentType\n        fields = ('id', 'name', 'description', 'charge')\n    def get_charge(self, obj):",
        "detail": "clinics.serializers",
        "documentation": {}
    },
    {
        "label": "AppointmentTypeSerializer",
        "kind": 6,
        "importPath": "clinics.serializers",
        "description": "clinics.serializers",
        "peekOfCode": "class AppointmentTypeSerializer(BaseSerializer):\n    charge = serializers.SerializerMethodField()\n    class Meta:\n        model = AppointmentType\n        fields = ('id', 'name', 'description', 'charge')\n    def get_charge(self, obj):\n        return obj.get_charge()",
        "detail": "clinics.serializers",
        "documentation": {}
    },
    {
        "label": "create_clinic_availability",
        "kind": 2,
        "importPath": "clinics.tasks",
        "description": "clinics.tasks",
        "peekOfCode": "def create_clinic_availability(start_date: date, end_date: date) -> None:\n    \"\"\"\n    Create ClinicAvailability objects for each day between start_date and end_date, for each clinic and appointment type.\n    \"\"\"\n    clinics = Clinic.objects.all()\n    appointment_types = AppointmentType.objects.all()\n    for clinic in clinics:\n        for appointment_type in appointment_types:\n            for delta in range((end_date - start_date).days + 1):\n                current_date = start_date + timedelta(days=delta)",
        "detail": "clinics.tasks",
        "documentation": {}
    },
    {
        "label": "today",
        "kind": 5,
        "importPath": "clinics.tasks",
        "description": "clinics.tasks",
        "peekOfCode": "today = timezone.now().date()\ncreate_clinic_availability(today, today + timedelta(days=29))",
        "detail": "clinics.tasks",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "clinics.urls",
        "description": "clinics.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'clinics', ClinicViewSet, basename='clinic')\nrouter.register(r'appointments', AppointmentViewSet, basename='appointment')\nurlpatterns = router.urls",
        "detail": "clinics.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "clinics.urls",
        "description": "clinics.urls",
        "peekOfCode": "urlpatterns = router.urls",
        "detail": "clinics.urls",
        "documentation": {}
    },
    {
        "label": "ClinicViewSet",
        "kind": 6,
        "importPath": "clinics.views",
        "description": "clinics.views",
        "peekOfCode": "class ClinicViewSet(BaseViewSet):\n    serializer_class = ClinicSerializer\n    @action(detail=True, methods=['get'], name='Clinic Info')\n    def clinic_info(self, request, pk=None):\n        clinic = self.get_object()\n        location = clinic.get_location()\n        basic_info = clinic.get_basic_info()\n        management = clinic.get_management()\n        if not all([location, basic_info, management]):\n            return Response({'message': 'Some data not found.'}, status=status.HTTP_404_NOT_FOUND)",
        "detail": "clinics.views",
        "documentation": {}
    },
    {
        "label": "AppointmentViewSet",
        "kind": 6,
        "importPath": "clinics.views",
        "description": "clinics.views",
        "peekOfCode": "class AppointmentViewSet(BaseViewSet):\n    serializer_class = AppointmentSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def perform_create(self, serializer):\n        \"\"\"\n        Set the patient based on the authenticated user\n        \"\"\"\n        user = self.request.user\n        serializer.save(patient=user)\n    @action(detail=False, methods=['get'])",
        "detail": "clinics.views",
        "documentation": {}
    },
    {
        "label": "LocationWidget",
        "kind": 6,
        "importPath": "clinics.widgets",
        "description": "clinics.widgets",
        "peekOfCode": "class LocationWidget(Widget, metaclass=MediaDefiningClass):\n    class Media:\n        js = [\n            'https://maps.googleapis.com/maps/api/js?key={}&libraries=places'.format(settings.GOOGLE_MAPS_API_KEY),\n            'https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js',\n        ]\n    def __init__(self, attrs=None):\n        default_attrs = {'class': 'location-widget'}\n        if attrs:\n            default_attrs.update(attrs)",
        "detail": "clinics.widgets",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "consultations.migrations.0001_initial",
        "description": "consultations.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('clinics', '0007_delete_medicalrecord'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Consultation',\n            fields=[",
        "detail": "consultations.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "consultations.migrations.0002_remove_consultation_staff_consultation_recipient",
        "description": "consultations.migrations.0002_remove_consultation_staff_consultation_recipient",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('consultations', '0001_initial'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='consultation',\n            name='staff',\n        ),",
        "detail": "consultations.migrations.0002_remove_consultation_staff_consultation_recipient",
        "documentation": {}
    },
    {
        "label": "ConsultationAdmin",
        "kind": 6,
        "importPath": "consultations.admin",
        "description": "consultations.admin",
        "peekOfCode": "class ConsultationAdmin(admin.ModelAdmin):\n    list_display = ('sender', 'recipient', 'created_at', 'status')\n    list_filter = ('status',)\n    search_fields = ('sender__username', 'recipient__username')\n    autocomplete_fields = ('recipient',)\nadmin.site.register(Consultation, ConsultationAdmin)",
        "detail": "consultations.admin",
        "documentation": {}
    },
    {
        "label": "ConsultationsConfig",
        "kind": 6,
        "importPath": "consultations.apps",
        "description": "consultations.apps",
        "peekOfCode": "class ConsultationsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'consultations'",
        "detail": "consultations.apps",
        "documentation": {}
    },
    {
        "label": "generate_text",
        "kind": 2,
        "importPath": "consultations.chatgpt",
        "description": "consultations.chatgpt",
        "peekOfCode": "def generate_text(prompt):\n  if prompt in cache and time.time() - cache[prompt]['timestamp'] < CACHE_EXPIRY_SECONDS:\n    # If the prompt exists in the cache and the cache is still valid, return the cached response\n    return cache[prompt]['response']\n  response = None\n  while response is None:\n    try:\n        response = openai.ChatCompletion.create(\n        model=\"gpt-3.5-turbo\",\n        messages=[",
        "detail": "consultations.chatgpt",
        "documentation": {}
    },
    {
        "label": "openai.api_key",
        "kind": 5,
        "importPath": "consultations.chatgpt",
        "description": "consultations.chatgpt",
        "peekOfCode": "openai.api_key = config('OPENAI_API_KEY')\nCACHE_EXPIRY_SECONDS = 60  # Set cache expiry time to 60 seconds\n# Define a dictionary to store cached responses\ncache = {}\n@retry(stop=stop_after_delay(60), wait=wait_fixed(1))\ndef generate_text(prompt):\n  if prompt in cache and time.time() - cache[prompt]['timestamp'] < CACHE_EXPIRY_SECONDS:\n    # If the prompt exists in the cache and the cache is still valid, return the cached response\n    return cache[prompt]['response']\n  response = None",
        "detail": "consultations.chatgpt",
        "documentation": {}
    },
    {
        "label": "CACHE_EXPIRY_SECONDS",
        "kind": 5,
        "importPath": "consultations.chatgpt",
        "description": "consultations.chatgpt",
        "peekOfCode": "CACHE_EXPIRY_SECONDS = 60  # Set cache expiry time to 60 seconds\n# Define a dictionary to store cached responses\ncache = {}\n@retry(stop=stop_after_delay(60), wait=wait_fixed(1))\ndef generate_text(prompt):\n  if prompt in cache and time.time() - cache[prompt]['timestamp'] < CACHE_EXPIRY_SECONDS:\n    # If the prompt exists in the cache and the cache is still valid, return the cached response\n    return cache[prompt]['response']\n  response = None\n  while response is None:",
        "detail": "consultations.chatgpt",
        "documentation": {}
    },
    {
        "label": "cache",
        "kind": 5,
        "importPath": "consultations.chatgpt",
        "description": "consultations.chatgpt",
        "peekOfCode": "cache = {}\n@retry(stop=stop_after_delay(60), wait=wait_fixed(1))\ndef generate_text(prompt):\n  if prompt in cache and time.time() - cache[prompt]['timestamp'] < CACHE_EXPIRY_SECONDS:\n    # If the prompt exists in the cache and the cache is still valid, return the cached response\n    return cache[prompt]['response']\n  response = None\n  while response is None:\n    try:\n        response = openai.ChatCompletion.create(",
        "detail": "consultations.chatgpt",
        "documentation": {}
    },
    {
        "label": "ConsultationManager",
        "kind": 6,
        "importPath": "consultations.models",
        "description": "consultations.models",
        "peekOfCode": "class ConsultationManager(models.Manager):\n    def create_consultation(self, sender, content, staff=3, appointment_type='Virtual Consultation'):\n        # validate clinic and appointment type exist in the database\n        appointment_type_obj = AppointmentType.objects.get(name=appointment_type)\n        if appointment_type_obj.name.lower() != 'virtual consultation':\n            raise ValueError('Appointment type must be virtual consultation')\n        # check if sender and recipient are the same user\n        if sender == staff.user:\n            raise ValueError('Sender and staff cannot be the same user')\n        # check if recipient is valid",
        "detail": "consultations.models",
        "documentation": {}
    },
    {
        "label": "Consultation",
        "kind": 6,
        "importPath": "consultations.models",
        "description": "consultations.models",
        "peekOfCode": "class Consultation(Searchable):\n    sender = models.ForeignKey(User, on_delete=models.CASCADE, related_name='sent_consultations')\n    recipient = models.ForeignKey(User, on_delete=models.CASCADE, related_name='received_consultations')\n    content = models.TextField()\n    created_at = models.DateTimeField(default=timezone.now)\n    is_read = models.BooleanField(default=False)\n    status = models.CharField(max_length=20, choices=(('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed')), default='pending')\n    objects = ConsultationManager()\n    def mark_as_read(self):\n        if not self.is_read:",
        "detail": "consultations.models",
        "documentation": {}
    },
    {
        "label": "ConsultationSerializer",
        "kind": 6,
        "importPath": "consultations.serializers",
        "description": "consultations.serializers",
        "peekOfCode": "class ConsultationSerializer(BaseSerializer):\n    class Meta:\n        model = Consultation\n        fields = ['id', 'sender', 'recipient', 'content', 'created_at', 'is_read', 'status']\n    def create(self, validated_data):\n        validated_data.pop('id', None)\n        return super().create(validated_data)",
        "detail": "consultations.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "consultations.urls",
        "description": "consultations.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'consultations', ConsultationViewSet,basename='consultation')\nurlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "consultations.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "consultations.urls",
        "description": "consultations.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "consultations.urls",
        "documentation": {}
    },
    {
        "label": "ConsultationViewSet",
        "kind": 6,
        "importPath": "consultations.views",
        "description": "consultations.views",
        "peekOfCode": "class ConsultationViewSet(BaseViewSet):\n    serializer_class = ConsultationSerializer\n    def create(self, request, *args, **kwargs):\n        # check if request has bot:true\n        if request.data.get('bot') == 'true':\n            # retrieve staff user with specified details\n            staff_user = self.get_staff_user()\n            if not staff_user:\n                # handle case when staff user is not found\n                return Response({\"message\": \"Staff user not found.\"}, status=status.HTTP_404_NOT_FOUND)",
        "detail": "consultations.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "notifications.migrations.0001_initial",
        "description": "notifications.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Notification',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "notifications.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "notifications.migrations.0002_remove_notification_notification_preference",
        "description": "notifications.migrations.0002_remove_notification_notification_preference",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('notifications', '0001_initial'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='notification',\n            name='notification_preference',\n        ),\n    ]",
        "detail": "notifications.migrations.0002_remove_notification_notification_preference",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "notifications.migrations.0003_alter_notification_date_sent",
        "description": "notifications.migrations.0003_alter_notification_date_sent",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('notifications', '0002_remove_notification_notification_preference'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='notification',\n            name='date_sent',\n            field=models.DateTimeField(default=django.utils.timezone.now),\n        ),",
        "detail": "notifications.migrations.0003_alter_notification_date_sent",
        "documentation": {}
    },
    {
        "label": "NotificationAdmin",
        "kind": 6,
        "importPath": "notifications.admin",
        "description": "notifications.admin",
        "peekOfCode": "class NotificationAdmin(admin.ModelAdmin):\n    list_display = ('id', 'subject', 'notification_type', 'date_created', 'date_sent', 'date_read')\n    list_filter = ('notification_type', 'importance_level', 'date_created', 'date_sent', 'date_read')\n    search_fields = ('subject', 'body', 'related_object')\n    autocomplete_fields = ('recipients',)\n    raw_id_fields = ('recipients',)\n    readonly_fields = ('id','sender', 'recipients','notification_type','subject','body', 'related_object','importance_level','date_created','date_sent', 'date_read','expiration_date')",
        "detail": "notifications.admin",
        "documentation": {}
    },
    {
        "label": "NotificationsConfig",
        "kind": 6,
        "importPath": "notifications.apps",
        "description": "notifications.apps",
        "peekOfCode": "class NotificationsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'notifications'",
        "detail": "notifications.apps",
        "documentation": {}
    },
    {
        "label": "send_email_notification",
        "kind": 2,
        "importPath": "notifications.channels",
        "description": "notifications.channels",
        "peekOfCode": "def send_email_notification(subject: str, body: str, recipients: List[str], sender: str = 'System', \n                            cc: List[str] = None, bcc: List[str] = None, attachments: List[str] = None) -> None:\n    \"\"\"\n    Sends an email notification to the specified recipients.\n    Args:\n        subject (str): The subject of the email.\n        body (str): The body of the email.\n        recipients (List[str]): A list of email addresses to send the email to.\n        sender (str, optional): The name of the sender. Defaults to 'System'.\n        cc (List[str], optional): A list of email addresses to carbon copy the email to. Defaults to None.",
        "detail": "notifications.channels",
        "documentation": {}
    },
    {
        "label": "send_sms_notification",
        "kind": 2,
        "importPath": "notifications.channels",
        "description": "notifications.channels",
        "peekOfCode": "def send_sms_notification(subject: str, body: str, recipients: List[str], sender: str = 'System') -> None:\n    \"\"\"\n    Sends an SMS notification to the specified recipients.\n    Args:\n        subject (str): The subject of the SMS. This argument is ignored.\n        body (str): The body of the SMS.\n        recipients (List[str]): A list of phone numbers to send the SMS to.\n        sender (str, optional): The name of the sender. Defaults to 'System'.\n    \"\"\"\n    account_sid = os.environ.get('TWILIO_ACCOUNT_SID')",
        "detail": "notifications.channels",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "notifications.commands",
        "description": "notifications.commands",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Deletes expired notifications'\n    def handle(self, *args, **options):\n        # Calculate the current datetime\n        now = datetime.now()\n        # Find all notifications that have an expiration date less than or equal to the current datetime\n        expired_notifications = NotificationModel.objects.filter(expiration_date__lte=now)\n        # Delete the expired notifications\n        expired_notifications.delete()\n        # Print a message indicating how many notifications were deleted",
        "detail": "notifications.commands",
        "documentation": {}
    },
    {
        "label": "NotificationType",
        "kind": 6,
        "importPath": "notifications.enums",
        "description": "notifications.enums",
        "peekOfCode": "class NotificationType(models.TextChoices):\n    INFO = 'info'\n    WARNING = 'warning'\n    ERROR = 'error'\n    SUCCESS = 'success'\n    UPDATE = 'update'\nclass NotificationPreference(models.TextChoices):\n    DATABASE = 'database'\n    EMAIL = 'email'\n    SMS = 'sms'",
        "detail": "notifications.enums",
        "documentation": {}
    },
    {
        "label": "NotificationPreference",
        "kind": 6,
        "importPath": "notifications.enums",
        "description": "notifications.enums",
        "peekOfCode": "class NotificationPreference(models.TextChoices):\n    DATABASE = 'database'\n    EMAIL = 'email'\n    SMS = 'sms'",
        "detail": "notifications.enums",
        "documentation": {}
    },
    {
        "label": "Notification",
        "kind": 6,
        "importPath": "notifications.models",
        "description": "notifications.models",
        "peekOfCode": "class Notification(Searchable):\n    \"\"\"\n    A model for storing notifications and sending them to users based on their notification preferences.\n    Attributes:\n        notification_type (str): The type of the notification. Should be one of the NotificationType choices.\n        notification_preference (List[str]): A list of the user's preferred notification methods.\n            Should be a combination of NotificationPreference choices.\n        body (str): The main content of the notification message.\n        subject (str): A brief summary or title of the notification.\n        sender (str): The user or system that initiated the notification.",
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "NotificationSerializer",
        "kind": 6,
        "importPath": "notifications.serializers",
        "description": "notifications.serializers",
        "peekOfCode": "class NotificationSerializer(BaseSerializer):\n    date_created = serializers.DateTimeField(format=\"%b %d %Y, %I:%M%p\")\n    date_sent = serializers.DateTimeField(format=\"%b %d %Y, %I:%M%p\")\n    date_read = serializers.DateTimeField(format=\"%b %d %Y, %I:%M%p\")\n    expiration_date = serializers.DateTimeField(format=\"%b %d %Y, %I:%M%p\")\n    class Meta:\n        model = Notification\n        fields = ['sender', 'recipients', 'subject', 'body', 'date_created', 'date_sent', 'date_read', 'expiration_date']",
        "detail": "notifications.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "notifications.urls",
        "description": "notifications.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'notifications', NotificationViewSet, basename='notification')\nurlpatterns = router.urls",
        "detail": "notifications.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "notifications.urls",
        "description": "notifications.urls",
        "peekOfCode": "urlpatterns = router.urls",
        "detail": "notifications.urls",
        "documentation": {}
    },
    {
        "label": "NotificationViewSet",
        "kind": 6,
        "importPath": "notifications.views",
        "description": "notifications.views",
        "peekOfCode": "class NotificationViewSet(BaseViewSet):\n    serializer_class = NotificationSerializer\n    lookup_field = 'pk'\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        queryset = queryset.filter(recipients=self.request.user.pk)\n        return queryset\n    @action(detail=True, methods=['post'], name='Mark as Read')\n    def mark_as_read(self, request, pk=None):\n        notification = self.get_object()",
        "detail": "notifications.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "pharmacy.migrations.0001_initial",
        "description": "pharmacy.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('clinics', '0007_delete_medicalrecord'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Medication',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "pharmacy.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "MedicationAdmin",
        "kind": 6,
        "importPath": "pharmacy.admin",
        "description": "pharmacy.admin",
        "peekOfCode": "class MedicationAdmin(admin.ModelAdmin):\n    list_display = ('name', 'formulation', 'quantity', 'threshold', 'unit_price', 'manufacturer', 'supplier')\n    list_filter = ('manufacturer', 'supplier')\n    search_fields = ('name', 'formulation', 'description')\n@admin.register(MedicationAvailability)\nclass MedicationAvailabilityAdmin(admin.ModelAdmin):\n    list_display = ('medication', 'clinic', 'is_available')\n    list_filter = ('clinic', 'is_available')\n    search_fields = ('medication__name', 'medication__formulation', 'medication__description')\n    raw_id_fields = ('medication',)",
        "detail": "pharmacy.admin",
        "documentation": {}
    },
    {
        "label": "MedicationAvailabilityAdmin",
        "kind": 6,
        "importPath": "pharmacy.admin",
        "description": "pharmacy.admin",
        "peekOfCode": "class MedicationAvailabilityAdmin(admin.ModelAdmin):\n    list_display = ('medication', 'clinic', 'is_available')\n    list_filter = ('clinic', 'is_available')\n    search_fields = ('medication__name', 'medication__formulation', 'medication__description')\n    raw_id_fields = ('medication',)\n@admin.register(Order)\nclass OrderAdmin(admin.ModelAdmin):\n    list_display = ('medication', 'quantity', 'unit_price', 'supplier', 'ordered_at')\n    list_filter = ('supplier', 'ordered_at')\n    search_fields = ('medication__name', 'medication__formulation', 'medication__description')",
        "detail": "pharmacy.admin",
        "documentation": {}
    },
    {
        "label": "OrderAdmin",
        "kind": 6,
        "importPath": "pharmacy.admin",
        "description": "pharmacy.admin",
        "peekOfCode": "class OrderAdmin(admin.ModelAdmin):\n    list_display = ('medication', 'quantity', 'unit_price', 'supplier', 'ordered_at')\n    list_filter = ('supplier', 'ordered_at')\n    search_fields = ('medication__name', 'medication__formulation', 'medication__description')\n    raw_id_fields = ('medication',)\n@admin.register(Delivery)\nclass DeliveryAdmin(admin.ModelAdmin):\n    list_display = ('medication', 'order', 'quantity', 'unit_price', 'received_at')\n    list_filter = ('received_at',)\n    search_fields = ('medication__name', 'medication__formulation', 'medication__description')",
        "detail": "pharmacy.admin",
        "documentation": {}
    },
    {
        "label": "DeliveryAdmin",
        "kind": 6,
        "importPath": "pharmacy.admin",
        "description": "pharmacy.admin",
        "peekOfCode": "class DeliveryAdmin(admin.ModelAdmin):\n    list_display = ('medication', 'order', 'quantity', 'unit_price', 'received_at')\n    list_filter = ('received_at',)\n    search_fields = ('medication__name', 'medication__formulation', 'medication__description')\n    raw_id_fields = ('medication', 'order')\n@admin.register(Treatment)\nclass TreatmentAdmin(admin.ModelAdmin):\n    list_display = ('medication', 'dosage', 'start_date', 'end_date', 'staff', 'clinic')\n    list_filter = ('start_date', 'staff', 'clinic')\n    search_fields = ('medication__name', 'medication__formulation', 'medication__description')",
        "detail": "pharmacy.admin",
        "documentation": {}
    },
    {
        "label": "TreatmentAdmin",
        "kind": 6,
        "importPath": "pharmacy.admin",
        "description": "pharmacy.admin",
        "peekOfCode": "class TreatmentAdmin(admin.ModelAdmin):\n    list_display = ('medication', 'dosage', 'start_date', 'end_date', 'staff', 'clinic')\n    list_filter = ('start_date', 'staff', 'clinic')\n    search_fields = ('medication__name', 'medication__formulation', 'medication__description')\n    raw_id_fields = ('medication', 'staff', 'clinic')\n@admin.register(Prescription)\nclass PrescriptionAdmin(admin.ModelAdmin):\n    list_display = ('medication', 'dosage', 'start_date', 'end_date', 'staff', 'clinic', 'duration', 'refillable', 'refill_quantity')\n    list_filter = ('start_date', 'staff', 'clinic', 'refillable')\n    search_fields = ('medication__name', 'medication__formulation', 'medication__description')",
        "detail": "pharmacy.admin",
        "documentation": {}
    },
    {
        "label": "PrescriptionAdmin",
        "kind": 6,
        "importPath": "pharmacy.admin",
        "description": "pharmacy.admin",
        "peekOfCode": "class PrescriptionAdmin(admin.ModelAdmin):\n    list_display = ('medication', 'dosage', 'start_date', 'end_date', 'staff', 'clinic', 'duration', 'refillable', 'refill_quantity')\n    list_filter = ('start_date', 'staff', 'clinic', 'refillable')\n    search_fields = ('medication__name', 'medication__formulation', 'medication__description')\n    raw_id_fields = ('medication', 'staff', 'clinic')\n@admin.register(PrescriptionRefill)\nclass PrescriptionRefillAdmin(admin.ModelAdmin):\n    list_display = ('prescription', 'patient', 'date_requested', 'status', 'remaining_refills')\n    list_filter = ('status',)\n    search_fields = ('prescription__medication__name', 'patient__username', 'patient__email')",
        "detail": "pharmacy.admin",
        "documentation": {}
    },
    {
        "label": "PrescriptionRefillAdmin",
        "kind": 6,
        "importPath": "pharmacy.admin",
        "description": "pharmacy.admin",
        "peekOfCode": "class PrescriptionRefillAdmin(admin.ModelAdmin):\n    list_display = ('prescription', 'patient', 'date_requested', 'status', 'remaining_refills')\n    list_filter = ('status',)\n    search_fields = ('prescription__medication__name', 'patient__username', 'patient__email')\n    raw_id_fields = ('prescription', 'patient')\n@admin.register(PrescriptionRefillRequest)\nclass PrescriptionRefillRequestAdmin(admin.ModelAdmin):\n    list_display = ('prescription', 'patient', 'date_requested', 'status')\n    list_filter = ('status',)\n    search_fields = ('prescription__medication__name', 'patient__username', 'patient__email')",
        "detail": "pharmacy.admin",
        "documentation": {}
    },
    {
        "label": "PrescriptionRefillRequestAdmin",
        "kind": 6,
        "importPath": "pharmacy.admin",
        "description": "pharmacy.admin",
        "peekOfCode": "class PrescriptionRefillRequestAdmin(admin.ModelAdmin):\n    list_display = ('prescription', 'patient', 'date_requested', 'status')\n    list_filter = ('status',)\n    search_fields = ('prescription__medication__name', 'patient__username', 'patient__email')\n    raw_id_fields = ('prescription', 'patient')\n@admin.register(Escalation)\nclass EscalationAdmin(admin.ModelAdmin):\n    list_display = ('patient', 'treatment', 'date')\n    list_filter = ('date',)\n    search_fields = ('patient__username', 'patient__email', 'treatment__medication__name')",
        "detail": "pharmacy.admin",
        "documentation": {}
    },
    {
        "label": "EscalationAdmin",
        "kind": 6,
        "importPath": "pharmacy.admin",
        "description": "pharmacy.admin",
        "peekOfCode": "class EscalationAdmin(admin.ModelAdmin):\n    list_display = ('patient', 'treatment', 'date')\n    list_filter = ('date',)\n    search_fields = ('patient__username', 'patient__email', 'treatment__medication__name')\n    raw_id_fields = ('patient', 'treatment')\n@admin.register(MedicalRecord)\nclass MedicalRecordAdmin(admin.ModelAdmin):\n    list_display = ('id', 'patient', 'staff', 'appointment', 'created_at', 'updated_at')\n    search_fields = ('patient__user__username', 'patient__user__first_name', 'patient__user__last_name', 'staff__user__username', 'staff__user__first_name', 'staff__user__last_name', 'appointment__id')\n    ordering = ('-created_at', '-updated_at')",
        "detail": "pharmacy.admin",
        "documentation": {}
    },
    {
        "label": "MedicalRecordAdmin",
        "kind": 6,
        "importPath": "pharmacy.admin",
        "description": "pharmacy.admin",
        "peekOfCode": "class MedicalRecordAdmin(admin.ModelAdmin):\n    list_display = ('id', 'patient', 'staff', 'appointment', 'created_at', 'updated_at')\n    search_fields = ('patient__user__username', 'patient__user__first_name', 'patient__user__last_name', 'staff__user__username', 'staff__user__first_name', 'staff__user__last_name', 'appointment__id')\n    ordering = ('-created_at', '-updated_at')\n    raw_id_fields = ('patient', 'staff', 'appointment')",
        "detail": "pharmacy.admin",
        "documentation": {}
    },
    {
        "label": "PharmacyConfig",
        "kind": 6,
        "importPath": "pharmacy.apps",
        "description": "pharmacy.apps",
        "peekOfCode": "class PharmacyConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'pharmacy'",
        "detail": "pharmacy.apps",
        "documentation": {}
    },
    {
        "label": "Medication",
        "kind": 6,
        "importPath": "pharmacy.models",
        "description": "pharmacy.models",
        "peekOfCode": "class Medication(models.Model):\n    name = models.CharField(max_length=50)\n    formulation = models.CharField(max_length=50)\n    quantity = models.PositiveIntegerField(default=0, validators=[MinValueValidator(0)])\n    threshold = models.PositiveIntegerField(default=10, validators=[MinValueValidator(0)])\n    unit_price = models.DecimalField(max_digits=10, decimal_places=2, validators=[MinValueValidator(0)])\n    manufacturer = models.CharField(max_length=50)\n    supplier = models.CharField(max_length=50)\n    description = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)",
        "detail": "pharmacy.models",
        "documentation": {}
    },
    {
        "label": "MedicationAvailability",
        "kind": 6,
        "importPath": "pharmacy.models",
        "description": "pharmacy.models",
        "peekOfCode": "class MedicationAvailability(models.Model):\n    medication = models.ForeignKey(Medication, on_delete=models.CASCADE)\n    clinic = models.ForeignKey(Clinic, on_delete=models.CASCADE)\n    is_available = models.BooleanField(default=False)\n    def __str__(self):\n        return f'{self.medication} is_available: ({self.is_available})'\nclass Order(models.Model):\n    medication = models.ForeignKey(Medication, on_delete=models.CASCADE)\n    quantity = models.PositiveIntegerField(validators=[MinValueValidator(1)])\n    unit_price = models.DecimalField(max_digits=10, decimal_places=2, validators=[MinValueValidator(0)])",
        "detail": "pharmacy.models",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "pharmacy.models",
        "description": "pharmacy.models",
        "peekOfCode": "class Order(models.Model):\n    medication = models.ForeignKey(Medication, on_delete=models.CASCADE)\n    quantity = models.PositiveIntegerField(validators=[MinValueValidator(1)])\n    unit_price = models.DecimalField(max_digits=10, decimal_places=2, validators=[MinValueValidator(0)])\n    supplier = models.CharField(max_length=50)\n    ordered_at = models.DateTimeField(auto_now_add=True)\n    @classmethod\n    def create_order(cls, clinic, medication_name, quantity):\n        medication = Medication.objects.filter(supplier=clinic, name=medication_name).first()\n        if medication is None:",
        "detail": "pharmacy.models",
        "documentation": {}
    },
    {
        "label": "Delivery",
        "kind": 6,
        "importPath": "pharmacy.models",
        "description": "pharmacy.models",
        "peekOfCode": "class Delivery(models.Model):\n    medication = models.ForeignKey(Medication, on_delete=models.CASCADE)\n    order = models.ForeignKey(Order, on_delete=models.CASCADE)\n    quantity = models.PositiveIntegerField(validators=[MinValueValidator(1)])\n    unit_price = models.DecimalField(max_digits=10, decimal_places=2, validators=[MinValueValidator(0)])\n    received_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f'{self.medication} order -{self.order} unit price - {self.unit_price}'\nclass Treatment(models.Model):\n    medication = models.ForeignKey(Medication, on_delete=models.CASCADE)",
        "detail": "pharmacy.models",
        "documentation": {}
    },
    {
        "label": "Treatment",
        "kind": 6,
        "importPath": "pharmacy.models",
        "description": "pharmacy.models",
        "peekOfCode": "class Treatment(models.Model):\n    medication = models.ForeignKey(Medication, on_delete=models.CASCADE)\n    dosage = models.DecimalField(max_digits=5, decimal_places=2, validators=[MinValueValidator(0)])\n    start_date = models.DateTimeField(default=timezone.now)\n    end_date = models.DateTimeField()\n    staff = models.ForeignKey(Staff, on_delete=models.CASCADE,related_name='staff_treatment')\n    clinic = models.ForeignKey(Clinic, on_delete=models.CASCADE,related_name='clinic_treatment')\n    def __str__(self):\n        return f'{self.medication}  ({self.dosage})'\n    def get_duration(self):",
        "detail": "pharmacy.models",
        "documentation": {}
    },
    {
        "label": "Prescription",
        "kind": 6,
        "importPath": "pharmacy.models",
        "description": "pharmacy.models",
        "peekOfCode": "class Prescription(Treatment):\n    appointments = models.ManyToManyField(Appointment, related_name='appointment_prescription')\n    medical_records = models.ManyToManyField('MedicalRecord', related_name='medical_records_prescription')\n    treatment = models.ForeignKey(Treatment, on_delete=models.CASCADE,related_name='treatment_prescription')\n    duration = models.DurationField()\n    refill_quantity = models.PositiveIntegerField(default=0)\n    refillable = models.BooleanField(default=True)\n    def __str__(self):\n        return f'{self.appointments} refillable - ({self.refillable})'\nclass PrescriptionRefill(models.Model):",
        "detail": "pharmacy.models",
        "documentation": {}
    },
    {
        "label": "PrescriptionRefill",
        "kind": 6,
        "importPath": "pharmacy.models",
        "description": "pharmacy.models",
        "peekOfCode": "class PrescriptionRefill(models.Model):\n    prescription = models.ForeignKey(Prescription, on_delete=models.CASCADE)\n    patient = models.ForeignKey(Patient, on_delete=models.CASCADE, related_name='patient_prescription_refill')\n    date_requested = models.DateTimeField(default=timezone.now)\n    status = models.CharField(max_length=50, default='PENDING')\n    def __str__(self):\n        return f'{self.prescription} status ({self.status})'\n    @property\n    def remaining_refills(self):\n        return self.prescription.refill_quantity - self.prescription.refill_requests.count()",
        "detail": "pharmacy.models",
        "documentation": {}
    },
    {
        "label": "PrescriptionRefillRequest",
        "kind": 6,
        "importPath": "pharmacy.models",
        "description": "pharmacy.models",
        "peekOfCode": "class PrescriptionRefillRequest(models.Model):\n    prescription = models.ForeignKey(Prescription, on_delete=models.CASCADE, related_name='refill_requests')\n    patient = models.ForeignKey(Patient, on_delete=models.CASCADE,related_name='patient_prescription_refill_requests')\n    date_requested = models.DateTimeField(default=timezone.now)\n    status = models.CharField(max_length=50, default='PENDING')\n    def __str__(self):\n        return f'{self.prescription} status({self.status})'\nclass RefillApprovalWorkflow:\n    log_models = ['prescriptionrefillrequest']\n    @fsm_log_by",
        "detail": "pharmacy.models",
        "documentation": {}
    },
    {
        "label": "RefillApprovalWorkflow",
        "kind": 6,
        "importPath": "pharmacy.models",
        "description": "pharmacy.models",
        "peekOfCode": "class RefillApprovalWorkflow:\n    log_models = ['prescriptionrefillrequest']\n    @fsm_log_by\n    class States:\n        PENDING = 1\n        APPROVED = 2\n        DENIED = 3\n    class Meta:\n        verbose_name = 'Refill Approval Workflow'\n    state = FSMIntegerField(default=States.PENDING, choices=States)",
        "detail": "pharmacy.models",
        "documentation": {}
    },
    {
        "label": "MedicalRecord",
        "kind": 6,
        "importPath": "pharmacy.models",
        "description": "pharmacy.models",
        "peekOfCode": "class MedicalRecord(models.Model):\n    \"\"\"\n    Medical record model\n    \"\"\"\n    clinic:Clinic = models.ForeignKey(\n        Clinic, on_delete=models.CASCADE, related_name='clinic_medicalrecord', related_query_name='clinic_medicalrecord',blank=True,null=True)\n    patient: Union[Patient, User] = models.ForeignKey(Patient, on_delete=models.CASCADE)\n    staff: Staff = models.ForeignKey(Staff, on_delete=models.CASCADE)\n    appointment = models.ForeignKey(Appointment, on_delete=models.CASCADE)\n    visit_reason = models.CharField(max_length=100)",
        "detail": "pharmacy.models",
        "documentation": {}
    },
    {
        "label": "Escalation",
        "kind": 6,
        "importPath": "pharmacy.models",
        "description": "pharmacy.models",
        "peekOfCode": "class Escalation(models.Model):\n    ESCALATION_TYPES = (\n        ('EMERGENCY', 'Emergency'),\n        ('URGENT', 'Urgent'),\n        ('ROUTINE', 'Routine'),\n    )\n    ESCALATION_STATUSES = (\n        ('PENDING', 'Pending'),\n        ('IN_PROGRESS', 'In Progress'),\n        ('RESOLVED', 'Resolved'),",
        "detail": "pharmacy.models",
        "documentation": {}
    },
    {
        "label": "refill_limitations",
        "kind": 2,
        "importPath": "pharmacy.models",
        "description": "pharmacy.models",
        "peekOfCode": "def refill_limitations(sender, instance, **kwargs):\n    if instance.refill_quantity == 0:\n        instance.refillable = False\n    elif instance.refill_requests.count() >= instance.refill_quantity:\n        instance.refillable = False\nclass MedicalRecord(models.Model):\n    \"\"\"\n    Medical record model\n    \"\"\"\n    clinic:Clinic = models.ForeignKey(",
        "detail": "pharmacy.models",
        "documentation": {}
    },
    {
        "label": "MedicationSerializer",
        "kind": 6,
        "importPath": "pharmacy.serializers",
        "description": "pharmacy.serializers",
        "peekOfCode": "class MedicationSerializer(BaseSerializer):\n    class Meta:\n        model = Medication\n        fields = ['id', 'name', 'description','manufacturer','unit_price']\nclass MedicationAvailabilitySerializer(BaseSerializer):\n    medication = MedicationSerializer()\n    class Meta:\n        model = MedicationAvailability\n        fields = ['id', 'medication', 'quantity']\nclass OrderSerializer(BaseSerializer):",
        "detail": "pharmacy.serializers",
        "documentation": {}
    },
    {
        "label": "MedicationAvailabilitySerializer",
        "kind": 6,
        "importPath": "pharmacy.serializers",
        "description": "pharmacy.serializers",
        "peekOfCode": "class MedicationAvailabilitySerializer(BaseSerializer):\n    medication = MedicationSerializer()\n    class Meta:\n        model = MedicationAvailability\n        fields = ['id', 'medication', 'quantity']\nclass OrderSerializer(BaseSerializer):\n    medication = MedicationSerializer()\n    class Meta:\n        model = Order\n        fields = ['id', 'medication', 'quantity']",
        "detail": "pharmacy.serializers",
        "documentation": {}
    },
    {
        "label": "OrderSerializer",
        "kind": 6,
        "importPath": "pharmacy.serializers",
        "description": "pharmacy.serializers",
        "peekOfCode": "class OrderSerializer(BaseSerializer):\n    medication = MedicationSerializer()\n    class Meta:\n        model = Order\n        fields = ['id', 'medication', 'quantity']\nclass DeliverySerializer(BaseSerializer):\n    medication = MedicationSerializer()\n    order = OrderSerializer()\n    class Meta:\n        model = Delivery",
        "detail": "pharmacy.serializers",
        "documentation": {}
    },
    {
        "label": "DeliverySerializer",
        "kind": 6,
        "importPath": "pharmacy.serializers",
        "description": "pharmacy.serializers",
        "peekOfCode": "class DeliverySerializer(BaseSerializer):\n    medication = MedicationSerializer()\n    order = OrderSerializer()\n    class Meta:\n        model = Delivery\n        fields = ['id', 'medication', 'order', 'delivery_date']\nclass TreatmentSerializer(BaseSerializer):\n    medication = MedicationSerializer()\n    class Meta:\n        model = Treatment",
        "detail": "pharmacy.serializers",
        "documentation": {}
    },
    {
        "label": "TreatmentSerializer",
        "kind": 6,
        "importPath": "pharmacy.serializers",
        "description": "pharmacy.serializers",
        "peekOfCode": "class TreatmentSerializer(BaseSerializer):\n    medication = MedicationSerializer()\n    class Meta:\n        model = Treatment\n        fields = ['id', 'medication', 'start_date', 'end_date']\nclass PrescriptionSerializer(BaseSerializer):\n    medication = MedicationSerializer()\n    treatment = TreatmentSerializer()\n    class Meta:\n        model = Prescription",
        "detail": "pharmacy.serializers",
        "documentation": {}
    },
    {
        "label": "PrescriptionSerializer",
        "kind": 6,
        "importPath": "pharmacy.serializers",
        "description": "pharmacy.serializers",
        "peekOfCode": "class PrescriptionSerializer(BaseSerializer):\n    medication = MedicationSerializer()\n    treatment = TreatmentSerializer()\n    class Meta:\n        model = Prescription\n        fields = ['id', 'medication', 'treatment', 'dosage', 'start_date', 'end_date']\nclass PrescriptionRefillSerializer(BaseSerializer):\n    prescription = PrescriptionSerializer()\n    class Meta:\n        model = PrescriptionRefill",
        "detail": "pharmacy.serializers",
        "documentation": {}
    },
    {
        "label": "PrescriptionRefillSerializer",
        "kind": 6,
        "importPath": "pharmacy.serializers",
        "description": "pharmacy.serializers",
        "peekOfCode": "class PrescriptionRefillSerializer(BaseSerializer):\n    prescription = PrescriptionSerializer()\n    class Meta:\n        model = PrescriptionRefill\n        fields = ['id', 'prescription', 'remaining_refills']\nclass PrescriptionRefillRequestSerializer(BaseSerializer):\n    prescription = PrescriptionSerializer()\n    class Meta:\n        model = PrescriptionRefillRequest\n        fields = ['id', 'prescription', 'status']",
        "detail": "pharmacy.serializers",
        "documentation": {}
    },
    {
        "label": "PrescriptionRefillRequestSerializer",
        "kind": 6,
        "importPath": "pharmacy.serializers",
        "description": "pharmacy.serializers",
        "peekOfCode": "class PrescriptionRefillRequestSerializer(BaseSerializer):\n    prescription = PrescriptionSerializer()\n    class Meta:\n        model = PrescriptionRefillRequest\n        fields = ['id', 'prescription', 'status']",
        "detail": "pharmacy.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "pharmacy.urls",
        "description": "pharmacy.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'prescriptions', PrescriptionViewSet, basename='prescription')\nrouter.register(r'medications', MedicationViewSet, basename='medication')\nurlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "pharmacy.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "pharmacy.urls",
        "description": "pharmacy.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "pharmacy.urls",
        "documentation": {}
    },
    {
        "label": "PrescriptionViewSet",
        "kind": 6,
        "importPath": "pharmacy.views",
        "description": "pharmacy.views",
        "peekOfCode": "class PrescriptionViewSet(BaseViewSet):\n    serializer_class = PrescriptionSerializer\n    http_method_names = ['get']\nclass MedicationViewSet(BaseViewSet):\n    serializer_class = MedicationSerializer\n    http_method_names = ['get']",
        "detail": "pharmacy.views",
        "documentation": {}
    },
    {
        "label": "MedicationViewSet",
        "kind": 6,
        "importPath": "pharmacy.views",
        "description": "pharmacy.views",
        "peekOfCode": "class MedicationViewSet(BaseViewSet):\n    serializer_class = MedicationSerializer\n    http_method_names = ['get']",
        "detail": "pharmacy.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chronicles.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]